// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  githubId     Int         @unique
  githubHandle String      @db.VarChar(255)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  claims       Claim[]
  // Hide poapSecret from generated resolvers
  /// @TypeGraphQL.omit(output: true, input: true)
  authTokens   AuthToken[]
}

model Profile {
  id              Int            @id @default(autoincrement())
  address         String         @unique @db.VarChar(255)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  bio             String?
  bannerImageUrl  String?        @db.VarChar(255)
  name            String?        @db.VarChar(255)
  profileImageUrl String?        @db.VarChar(255)
  twitterHandle   String?        @db.VarChar(255)
  personalSiteUrl String?        @db.VarChar(255)
  featuredPOAPs   FeaturedPOAP[]
}

model Organization {
  id            Int      @id @default(autoincrement())
  githubOrgId   Int      @unique
  name          String   @db.VarChar(50)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?
  twitterHandle String?  @db.VarChar(255)
  url           String?  @db.VarChar(255)
  repos         Repo[]
}

model Repo {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(50)
  githubRepoId   Int          @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  gitPOAPs       GitPOAP[]
}

model Claim {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      ClaimStatus @default(UNCLAIMED)
  // Hide qrHash from generated resolvers
  /// @TypeGraphQL.omit(output: true, input: true)
  qrHash      String?     @db.VarChar(10)
  poapTokenId String?     @unique @db.VarChar(255)
  address     String?     @db.VarChar(255)
  gitPOAPId   Int
  gitPOAP     GitPOAP     @relation(fields: [gitPOAPId], references: [id])
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
}

model GitPOAP {
  id          Int           @id @default(autoincrement())
  type        ClaimType     @default(ANNUAL)
  year        Int
  poapEventId Int           @unique
  repoId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  repo        Repo          @relation(fields: [repoId], references: [id])
  claims      Claim[]
  // Hide poapSecret from generated resolvers
  /// @TypeGraphQL.omit(output: true, input: true)
  poapSecret  String        @db.VarChar(6)
  status      GitPOAPStatus @default(UNAPPROVED)
  // If a GitPOAP is marked as ongoing then the backend will automatically
  // request additional codes when we reach a minimum number remaining
  ongoing     Boolean       @default(false)
  redeemCodes RedeemCode[]
}

model AuthToken {
  id               Int    @id @default(autoincrement())
  generation       Int    @default(0)
  githubOAuthToken String
  githubId         Int
  user             User   @relation(fields: [githubId], references: [githubId])
}

model FeaturedPOAP {
  id          Int     @id @default(autoincrement())
  // This key is chosen to allow both GitPOAPs and POAPs to be featured
  poapTokenId String  @unique @db.VarChar(255)
  profileId   Int
  profile     Profile @relation(fields: [profileId], references: [id])

  @@unique([poapTokenId, profileId])
}

model Secret {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RedeemCode {
  id        Int     @id @default(autoincrement())
  gitPOAPId Int
  gitPOAP   GitPOAP @relation(fields: [gitPOAPId], references: [id])
  code      String
}

enum GitPOAPStatus {
  UNAPPROVED
  APPROVED
  REDEEM_REQUEST_PENDING
}

enum ClaimStatus {
  UNCLAIMED
  PENDING
  MINTING
  CLAIMED
}

enum ClaimType {
  ANNUAL
  QUARTERLY
  MANUAL
}
