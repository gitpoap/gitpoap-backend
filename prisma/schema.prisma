// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  githubId          Int                 @unique
  githubHandle      String              @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  claims            Claim[]
  // Hide user.authTokens from generated resolvers
  /// @TypeGraphQL.omit(output: true, input: true)
  authTokens        AuthToken[]
  GithubPullRequest GithubPullRequest[]
  GithubIssue       GithubIssue[]
}

model Profile {
  id                     Int            @id @default(autoincrement())
  address                String         @unique @db.VarChar(255)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  bio                    String?
  bannerImageUrl         String?        @db.VarChar(255)
  name                   String?        @db.VarChar(255)
  profileImageUrl        String?        @db.VarChar(255)
  githubHandle           String?        @db.VarChar(255)
  twitterHandle          String?        @db.VarChar(255)
  personalSiteUrl        String?        @db.VarChar(255)
  isVisibleOnLeaderboard Boolean        @default(true)
  ensAvatarImageUrl      String?        @db.VarChar(255)
  featuredPOAPs          FeaturedPOAP[]
}

model Organization {
  id            Int      @id @default(autoincrement())
  githubOrgId   Int      @unique
  name          String   @db.VarChar(50)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?
  twitterHandle String?  @db.VarChar(255)
  url           String?  @db.VarChar(255)
  repos         Repo[]
}

model Repo {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  githubRepoId      Int                 @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  organizationId    Int
  organization      Organization        @relation(fields: [organizationId], references: [id])
  GithubPullRequest GithubPullRequest[]
  projectId         Int
  project           Project             @relation(fields: [projectId], references: [id])
  // Default to the beginning of the year, but this will update when contributions
  // are initially uploaded
  lastPRUpdatedAt   DateTime            @default(dbgenerated("date_trunc('year'::text, now())"))
  GithubIssue       GithubIssue[]
}

model Project {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  repos     Repo[]
  gitPOAPs  GitPOAP[]
}

model Claim {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  mintedAt            DateTime?
  status              ClaimStatus        @default(UNCLAIMED)
  // Hide qrHash from generated resolvers
  /// @TypeGraphQL.omit(output: true, input: true)
  qrHash              String?            @db.VarChar(10)
  poapTokenId         String?            @unique @db.VarChar(255)
  address             String?            @db.VarChar(255)
  gitPOAPId           Int
  gitPOAP             GitPOAP            @relation(fields: [gitPOAPId], references: [id])
  userId              Int
  user                User               @relation(fields: [userId], references: [id])
  // Note that not all Claims have pull request they were earned in (e.g. Hackathon GitPOAPs)
  pullRequestEarnedId Int?
  pullRequestEarned   GithubPullRequest? @relation(fields: [pullRequestEarnedId], references: [id])
  // Some claims are earned by tagging a user in an issue or when an issue is closed by a PR
  issueEarnedId       Int?
  issueEarned         GithubIssue?       @relation(fields: [issueEarnedId], references: [id])
  // Some claims were not earned by the creator of a CLOSED/MERGED PR/issue
  // but were attained by the contributor by mentions to the gitpoap-bot
  wasEarnedByMention  Boolean            @default(false)
  mentionedAt         DateTime?
  needsRevalidation   Boolean            @default(false)

  @@unique([gitPOAPId, userId])
}

model GitPOAP {
  id          Int           @id @default(autoincrement())
  type        ClaimType     @default(ANNUAL)
  name        String        @db.VarChar(255)
  imageUrl    String
  description String
  year        Int
  poapEventId Int           @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   Int
  project     Project       @relation(fields: [projectId], references: [id])
  claims      Claim[]
  // Hide poapSecret from generated resolvers
  /// @TypeGraphQL.omit(output: true, input: true)
  poapSecret  String        @db.VarChar(6)
  status      GitPOAPStatus @default(UNAPPROVED)
  // If a GitPOAP is marked as ongoing then the backend will automatically
  // request additional codes when we reach a minimum number remaining
  ongoing     Boolean       @default(false)
  redeemCodes RedeemCode[]
  eventId     Int?
  event       Event?        @relation(fields: [eventId], references: [id])
  level       Int           @default(1)
  threshold   Int           @default(1)
  isPRBased   Boolean       @default(true)
  isEnabled   Boolean       @default(true)
}

model AuthToken {
  id               Int    @id @default(autoincrement())
  generation       Int    @default(0)
  githubOAuthToken String
  githubId         Int
  user             User   @relation(fields: [githubId], references: [githubId])
}

model FeaturedPOAP {
  id          Int     @id @default(autoincrement())
  // This key is chosen to allow both GitPOAPs and POAPs to be featured
  poapTokenId String  @unique @db.VarChar(255)
  profileId   Int
  profile     Profile @relation(fields: [profileId], references: [id])

  @@unique([poapTokenId, profileId])
}

model Secret {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RedeemCode {
  id        Int     @id @default(autoincrement())
  gitPOAPId Int
  gitPOAP   GitPOAP @relation(fields: [gitPOAPId], references: [id])
  code      String

  @@unique([gitPOAPId, code])
}

// Model for coordinating batch processing across nodes
model BatchTiming {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  lastRun   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GithubPullRequest {
  id                   Int           @id @default(autoincrement())
  // Note that the following two fields are named in relation
  // to an instance of GithubPullRequest
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  githubPullNumber     Int
  githubTitle          String
  githubMergedAt       DateTime?
  githubMergeCommitSha String        @db.VarChar(41)
  repoId               Int
  repo                 Repo          @relation(fields: [repoId], references: [id])
  userId               Int
  user                 User          @relation(fields: [userId], references: [id])
  Claim                Claim[]
  GithubIssue          GithubIssue[]

  @@unique([repoId, githubPullNumber])
}

model GithubIssue {
  id                Int                @id @default(autoincrement())
  // Note that the following two fields are named in relation
  // to an instance of GithubIssue
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  githubIssueNumber Int
  githubTitle       String
  // If the user was tagged in an issue for the bot the issue may not have
  // been closed yet (or ever)
  githubClosedAt    DateTime?
  repoId            Int
  repo              Repo               @relation(fields: [repoId], references: [id])
  userId            Int
  user              User               @relation(fields: [userId], references: [id])
  prClosedById      Int?
  prClosedBy        GithubPullRequest? @relation(fields: [prClosedById], references: [id])
  Claim             Claim[]

  @@unique([repoId, githubIssueNumber])
}

model Event {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startDate     DateTime
  endDate       DateTime
  name          String    @db.VarChar(255)
  organization  String    @db.VarChar(255)
  description   String?
  location      String    @db.VarChar(255)
  imageUrl      String?   @db.VarChar(255)
  githubHandle  String?   @db.VarChar(255)
  twitterHandle String?   @db.VarChar(255)
  siteUrl       String?   @db.VarChar(255)
  GitPOAP       GitPOAP[]
}

enum GitPOAPStatus {
  UNAPPROVED
  APPROVED
  REDEEM_REQUEST_PENDING
  DEPRECATED
}

enum ClaimStatus {
  UNCLAIMED
  PENDING
  MINTING
  CLAIMED
}

enum ClaimType {
  ANNUAL
  QUARTERLY
  MANUAL
}
