# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateClaim {
  _avg: ClaimAvgAggregate
  _count: ClaimCountAggregate
  _max: ClaimMaxAggregate
  _min: ClaimMinAggregate
  _sum: ClaimSumAggregate
}

type AggregateGitPOAP {
  _avg: GitPOAPAvgAggregate
  _count: GitPOAPCountAggregate
  _max: GitPOAPMaxAggregate
  _min: GitPOAPMinAggregate
  _sum: GitPOAPSumAggregate
}

type AggregateOrganization {
  _avg: OrganizationAvgAggregate
  _count: OrganizationCountAggregate
  _max: OrganizationMaxAggregate
  _min: OrganizationMinAggregate
  _sum: OrganizationSumAggregate
}

type AggregateProfile {
  _avg: ProfileAvgAggregate
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  _sum: ProfileSumAggregate
}

type AggregateRepo {
  _avg: RepoAvgAggregate
  _count: RepoCountAggregate
  _max: RepoMaxAggregate
  _min: RepoMinAggregate
  _sum: RepoSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type Claim {
  address: String
  createdAt: DateTime!
  gitPOAP: GitPOAP!
  gitPOAPId: Int!
  id: Int!
  poapTokenId: String
  status: ClaimStatus!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type ClaimAvgAggregate {
  gitPOAPId: Float
  id: Float
  userId: Float
}

input ClaimAvgOrderByAggregateInput {
  gitPOAPId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ClaimCountAggregate {
  _all: Int!
  address: Int!
  createdAt: Int!
  gitPOAPId: Int!
  id: Int!
  poapTokenId: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
}

input ClaimCountOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  poapTokenId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClaimCreateInput {
  address: String
  createdAt: DateTime
  gitPOAP: GitPOAPCreateNestedOneWithoutClaimsInput!
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClaimsInput!
}

input ClaimCreateManyGitPOAPInput {
  address: String
  createdAt: DateTime
  id: Int
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
  userId: Int!
}

input ClaimCreateManyGitPOAPInputEnvelope {
  data: [ClaimCreateManyGitPOAPInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateManyInput {
  address: String
  createdAt: DateTime
  gitPOAPId: Int!
  id: Int
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
  userId: Int!
}

input ClaimCreateManyUserInput {
  address: String
  createdAt: DateTime
  gitPOAPId: Int!
  id: Int
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
}

input ClaimCreateManyUserInputEnvelope {
  data: [ClaimCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateNestedManyWithoutGitPOAPInput {
  connect: [ClaimWhereUniqueInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutGitPOAPInput!]
  create: [ClaimCreateWithoutGitPOAPInput!]
  createMany: ClaimCreateManyGitPOAPInputEnvelope
}

input ClaimCreateNestedManyWithoutUserInput {
  connect: [ClaimWhereUniqueInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutUserInput!]
  create: [ClaimCreateWithoutUserInput!]
  createMany: ClaimCreateManyUserInputEnvelope
}

input ClaimCreateOrConnectWithoutGitPOAPInput {
  create: ClaimCreateWithoutGitPOAPInput!
  where: ClaimWhereUniqueInput!
}

input ClaimCreateOrConnectWithoutUserInput {
  create: ClaimCreateWithoutUserInput!
  where: ClaimWhereUniqueInput!
}

input ClaimCreateWithoutGitPOAPInput {
  address: String
  createdAt: DateTime
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClaimsInput!
}

input ClaimCreateWithoutUserInput {
  address: String
  createdAt: DateTime
  gitPOAP: GitPOAPCreateNestedOneWithoutClaimsInput!
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
}

type ClaimGroupBy {
  _avg: ClaimAvgAggregate
  _count: ClaimCountAggregate
  _max: ClaimMaxAggregate
  _min: ClaimMinAggregate
  _sum: ClaimSumAggregate
  address: String
  createdAt: DateTime!
  gitPOAPId: Int!
  id: Int!
  poapTokenId: String
  status: ClaimStatus!
  updatedAt: DateTime!
  userId: Int!
}

input ClaimListRelationFilter {
  every: ClaimWhereInput
  none: ClaimWhereInput
  some: ClaimWhereInput
}

type ClaimMaxAggregate {
  address: String
  createdAt: DateTime
  gitPOAPId: Int
  id: Int
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
  userId: Int
}

input ClaimMaxOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  poapTokenId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ClaimMinAggregate {
  address: String
  createdAt: DateTime
  gitPOAPId: Int
  id: Int
  poapTokenId: String
  status: ClaimStatus
  updatedAt: DateTime
  userId: Int
}

input ClaimMinOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  poapTokenId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimOrderByWithAggregationInput {
  _avg: ClaimAvgOrderByAggregateInput
  _count: ClaimCountOrderByAggregateInput
  _max: ClaimMaxOrderByAggregateInput
  _min: ClaimMinOrderByAggregateInput
  _sum: ClaimSumOrderByAggregateInput
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  poapTokenId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClaimOrderByWithRelationInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAP: GitPOAPOrderByWithRelationInput
  gitPOAPId: SortOrder
  id: SortOrder
  poapTokenId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ClaimScalarFieldEnum {
  address
  createdAt
  gitPOAPId
  id
  poapTokenId
  status
  updatedAt
  userId
}

input ClaimScalarWhereInput {
  AND: [ClaimScalarWhereInput!]
  NOT: [ClaimScalarWhereInput!]
  OR: [ClaimScalarWhereInput!]
  address: StringNullableFilter
  createdAt: DateTimeFilter
  gitPOAPId: IntFilter
  id: IntFilter
  poapTokenId: StringNullableFilter
  status: EnumClaimStatusFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ClaimScalarWhereWithAggregatesInput {
  AND: [ClaimScalarWhereWithAggregatesInput!]
  NOT: [ClaimScalarWhereWithAggregatesInput!]
  OR: [ClaimScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  gitPOAPId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  poapTokenId: StringNullableWithAggregatesFilter
  status: EnumClaimStatusWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

enum ClaimStatus {
  CLAIMED
  PENDING
  UNCLAIMED
}

type ClaimSumAggregate {
  gitPOAPId: Int
  id: Int
  userId: Int
}

input ClaimSumOrderByAggregateInput {
  gitPOAPId: SortOrder
  id: SortOrder
  userId: SortOrder
}

enum ClaimType {
  ANNUAL
  MANUAL
  QUARTERLY
}

input ClaimUpdateInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gitPOAP: GitPOAPUpdateOneRequiredWithoutClaimsInput
  poapTokenId: NullableStringFieldUpdateOperationsInput
  status: EnumClaimStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClaimsInput
}

input ClaimUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  poapTokenId: NullableStringFieldUpdateOperationsInput
  status: EnumClaimStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClaimUpdateManyWithWhereWithoutGitPOAPInput {
  data: ClaimUpdateManyMutationInput!
  where: ClaimScalarWhereInput!
}

input ClaimUpdateManyWithWhereWithoutUserInput {
  data: ClaimUpdateManyMutationInput!
  where: ClaimScalarWhereInput!
}

input ClaimUpdateManyWithoutGitPOAPInput {
  connect: [ClaimWhereUniqueInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutGitPOAPInput!]
  create: [ClaimCreateWithoutGitPOAPInput!]
  createMany: ClaimCreateManyGitPOAPInputEnvelope
  delete: [ClaimWhereUniqueInput!]
  deleteMany: [ClaimScalarWhereInput!]
  disconnect: [ClaimWhereUniqueInput!]
  set: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutGitPOAPInput!]
  updateMany: [ClaimUpdateManyWithWhereWithoutGitPOAPInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutGitPOAPInput!]
}

input ClaimUpdateManyWithoutUserInput {
  connect: [ClaimWhereUniqueInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutUserInput!]
  create: [ClaimCreateWithoutUserInput!]
  createMany: ClaimCreateManyUserInputEnvelope
  delete: [ClaimWhereUniqueInput!]
  deleteMany: [ClaimScalarWhereInput!]
  disconnect: [ClaimWhereUniqueInput!]
  set: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ClaimUpdateManyWithWhereWithoutUserInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutUserInput!]
}

input ClaimUpdateWithWhereUniqueWithoutGitPOAPInput {
  data: ClaimUpdateWithoutGitPOAPInput!
  where: ClaimWhereUniqueInput!
}

input ClaimUpdateWithWhereUniqueWithoutUserInput {
  data: ClaimUpdateWithoutUserInput!
  where: ClaimWhereUniqueInput!
}

input ClaimUpdateWithoutGitPOAPInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  poapTokenId: NullableStringFieldUpdateOperationsInput
  status: EnumClaimStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClaimsInput
}

input ClaimUpdateWithoutUserInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gitPOAP: GitPOAPUpdateOneRequiredWithoutClaimsInput
  poapTokenId: NullableStringFieldUpdateOperationsInput
  status: EnumClaimStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClaimUpsertWithWhereUniqueWithoutGitPOAPInput {
  create: ClaimCreateWithoutGitPOAPInput!
  update: ClaimUpdateWithoutGitPOAPInput!
  where: ClaimWhereUniqueInput!
}

input ClaimUpsertWithWhereUniqueWithoutUserInput {
  create: ClaimCreateWithoutUserInput!
  update: ClaimUpdateWithoutUserInput!
  where: ClaimWhereUniqueInput!
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  address: StringNullableFilter
  createdAt: DateTimeFilter
  gitPOAP: GitPOAPRelationFilter
  gitPOAPId: IntFilter
  id: IntFilter
  poapTokenId: StringNullableFilter
  status: EnumClaimStatusFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ClaimWhereUniqueInput {
  id: Int
  poapTokenId: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumClaimStatusFieldUpdateOperationsInput {
  set: ClaimStatus
}

input EnumClaimStatusFilter {
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusFilter
  notIn: [ClaimStatus!]
}

input EnumClaimStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimStatusFilter
  _min: NestedEnumClaimStatusFilter
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusWithAggregatesFilter
  notIn: [ClaimStatus!]
}

input EnumClaimTypeFieldUpdateOperationsInput {
  set: ClaimType
}

input EnumClaimTypeFilter {
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeFilter
  notIn: [ClaimType!]
}

input EnumClaimTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimTypeFilter
  _min: NestedEnumClaimTypeFilter
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeWithAggregatesFilter
  notIn: [ClaimType!]
}

type GitPOAP {
  _count: GitPOAPCount
  claims(cursor: ClaimWhereUniqueInput, distinct: [ClaimScalarFieldEnum!], orderBy: [ClaimOrderByWithRelationInput!], skip: Int, take: Int, where: ClaimWhereInput): [Claim!]!
  createdAt: DateTime!
  id: Int!
  poapEventId: Int!
  repo: Repo!
  repoId: Int!
  type: ClaimType!
  updatedAt: DateTime!
  year: Int!
}

type GitPOAPAvgAggregate {
  id: Float
  poapEventId: Float
  repoId: Float
  year: Float
}

input GitPOAPAvgOrderByAggregateInput {
  id: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  year: SortOrder
}

type GitPOAPCount {
  claims: Int!
}

type GitPOAPCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  poapEventId: Int!
  repoId: Int!
  type: Int!
  updatedAt: Int!
  year: Int!
}

input GitPOAPCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPCreateInput {
  claims: ClaimCreateNestedManyWithoutGitPOAPInput
  createdAt: DateTime
  poapEventId: Int!
  repo: RepoCreateNestedOneWithoutGitPOAPsInput!
  type: ClaimType
  updatedAt: DateTime
  year: Int!
}

input GitPOAPCreateManyInput {
  createdAt: DateTime
  id: Int
  poapEventId: Int!
  repoId: Int!
  type: ClaimType
  updatedAt: DateTime
  year: Int!
}

input GitPOAPCreateManyRepoInput {
  createdAt: DateTime
  id: Int
  poapEventId: Int!
  type: ClaimType
  updatedAt: DateTime
  year: Int!
}

input GitPOAPCreateManyRepoInputEnvelope {
  data: [GitPOAPCreateManyRepoInput!]!
  skipDuplicates: Boolean
}

input GitPOAPCreateNestedManyWithoutRepoInput {
  connect: [GitPOAPWhereUniqueInput!]
  connectOrCreate: [GitPOAPCreateOrConnectWithoutRepoInput!]
  create: [GitPOAPCreateWithoutRepoInput!]
  createMany: GitPOAPCreateManyRepoInputEnvelope
}

input GitPOAPCreateNestedOneWithoutClaimsInput {
  connect: GitPOAPWhereUniqueInput
  connectOrCreate: GitPOAPCreateOrConnectWithoutClaimsInput
  create: GitPOAPCreateWithoutClaimsInput
}

input GitPOAPCreateOrConnectWithoutClaimsInput {
  create: GitPOAPCreateWithoutClaimsInput!
  where: GitPOAPWhereUniqueInput!
}

input GitPOAPCreateOrConnectWithoutRepoInput {
  create: GitPOAPCreateWithoutRepoInput!
  where: GitPOAPWhereUniqueInput!
}

input GitPOAPCreateWithoutClaimsInput {
  createdAt: DateTime
  poapEventId: Int!
  repo: RepoCreateNestedOneWithoutGitPOAPsInput!
  type: ClaimType
  updatedAt: DateTime
  year: Int!
}

input GitPOAPCreateWithoutRepoInput {
  claims: ClaimCreateNestedManyWithoutGitPOAPInput
  createdAt: DateTime
  poapEventId: Int!
  type: ClaimType
  updatedAt: DateTime
  year: Int!
}

type GitPOAPGroupBy {
  _avg: GitPOAPAvgAggregate
  _count: GitPOAPCountAggregate
  _max: GitPOAPMaxAggregate
  _min: GitPOAPMinAggregate
  _sum: GitPOAPSumAggregate
  createdAt: DateTime!
  id: Int!
  poapEventId: Int!
  repoId: Int!
  type: ClaimType!
  updatedAt: DateTime!
  year: Int!
}

input GitPOAPListRelationFilter {
  every: GitPOAPWhereInput
  none: GitPOAPWhereInput
  some: GitPOAPWhereInput
}

type GitPOAPMaxAggregate {
  createdAt: DateTime
  id: Int
  poapEventId: Int
  repoId: Int
  type: ClaimType
  updatedAt: DateTime
  year: Int
}

input GitPOAPMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

type GitPOAPMinAggregate {
  createdAt: DateTime
  id: Int
  poapEventId: Int
  repoId: Int
  type: ClaimType
  updatedAt: DateTime
  year: Int
}

input GitPOAPMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPOrderByRelationAggregateInput {
  _count: SortOrder
}

input GitPOAPOrderByWithAggregationInput {
  _avg: GitPOAPAvgOrderByAggregateInput
  _count: GitPOAPCountOrderByAggregateInput
  _max: GitPOAPMaxOrderByAggregateInput
  _min: GitPOAPMinOrderByAggregateInput
  _sum: GitPOAPSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPOrderByWithRelationInput {
  claims: ClaimOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  poapEventId: SortOrder
  repo: RepoOrderByWithRelationInput
  repoId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPRelationFilter {
  is: GitPOAPWhereInput
  isNot: GitPOAPWhereInput
}

enum GitPOAPScalarFieldEnum {
  createdAt
  id
  poapEventId
  repoId
  type
  updatedAt
  year
}

input GitPOAPScalarWhereInput {
  AND: [GitPOAPScalarWhereInput!]
  NOT: [GitPOAPScalarWhereInput!]
  OR: [GitPOAPScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  poapEventId: IntFilter
  repoId: IntFilter
  type: EnumClaimTypeFilter
  updatedAt: DateTimeFilter
  year: IntFilter
}

input GitPOAPScalarWhereWithAggregatesInput {
  AND: [GitPOAPScalarWhereWithAggregatesInput!]
  NOT: [GitPOAPScalarWhereWithAggregatesInput!]
  OR: [GitPOAPScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  poapEventId: IntWithAggregatesFilter
  repoId: IntWithAggregatesFilter
  type: EnumClaimTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  year: IntWithAggregatesFilter
}

type GitPOAPSumAggregate {
  id: Int
  poapEventId: Int
  repoId: Int
  year: Int
}

input GitPOAPSumOrderByAggregateInput {
  id: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  year: SortOrder
}

input GitPOAPUpdateInput {
  claims: ClaimUpdateManyWithoutGitPOAPInput
  createdAt: DateTimeFieldUpdateOperationsInput
  poapEventId: IntFieldUpdateOperationsInput
  repo: RepoUpdateOneRequiredWithoutGitPOAPsInput
  type: EnumClaimTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  year: IntFieldUpdateOperationsInput
}

input GitPOAPUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  poapEventId: IntFieldUpdateOperationsInput
  type: EnumClaimTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  year: IntFieldUpdateOperationsInput
}

input GitPOAPUpdateManyWithWhereWithoutRepoInput {
  data: GitPOAPUpdateManyMutationInput!
  where: GitPOAPScalarWhereInput!
}

input GitPOAPUpdateManyWithoutRepoInput {
  connect: [GitPOAPWhereUniqueInput!]
  connectOrCreate: [GitPOAPCreateOrConnectWithoutRepoInput!]
  create: [GitPOAPCreateWithoutRepoInput!]
  createMany: GitPOAPCreateManyRepoInputEnvelope
  delete: [GitPOAPWhereUniqueInput!]
  deleteMany: [GitPOAPScalarWhereInput!]
  disconnect: [GitPOAPWhereUniqueInput!]
  set: [GitPOAPWhereUniqueInput!]
  update: [GitPOAPUpdateWithWhereUniqueWithoutRepoInput!]
  updateMany: [GitPOAPUpdateManyWithWhereWithoutRepoInput!]
  upsert: [GitPOAPUpsertWithWhereUniqueWithoutRepoInput!]
}

input GitPOAPUpdateOneRequiredWithoutClaimsInput {
  connect: GitPOAPWhereUniqueInput
  connectOrCreate: GitPOAPCreateOrConnectWithoutClaimsInput
  create: GitPOAPCreateWithoutClaimsInput
  update: GitPOAPUpdateWithoutClaimsInput
  upsert: GitPOAPUpsertWithoutClaimsInput
}

input GitPOAPUpdateWithWhereUniqueWithoutRepoInput {
  data: GitPOAPUpdateWithoutRepoInput!
  where: GitPOAPWhereUniqueInput!
}

input GitPOAPUpdateWithoutClaimsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  poapEventId: IntFieldUpdateOperationsInput
  repo: RepoUpdateOneRequiredWithoutGitPOAPsInput
  type: EnumClaimTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  year: IntFieldUpdateOperationsInput
}

input GitPOAPUpdateWithoutRepoInput {
  claims: ClaimUpdateManyWithoutGitPOAPInput
  createdAt: DateTimeFieldUpdateOperationsInput
  poapEventId: IntFieldUpdateOperationsInput
  type: EnumClaimTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  year: IntFieldUpdateOperationsInput
}

input GitPOAPUpsertWithWhereUniqueWithoutRepoInput {
  create: GitPOAPCreateWithoutRepoInput!
  update: GitPOAPUpdateWithoutRepoInput!
  where: GitPOAPWhereUniqueInput!
}

input GitPOAPUpsertWithoutClaimsInput {
  create: GitPOAPCreateWithoutClaimsInput!
  update: GitPOAPUpdateWithoutClaimsInput!
}

input GitPOAPWhereInput {
  AND: [GitPOAPWhereInput!]
  NOT: [GitPOAPWhereInput!]
  OR: [GitPOAPWhereInput!]
  claims: ClaimListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  poapEventId: IntFilter
  repo: RepoRelationFilter
  repoId: IntFilter
  type: EnumClaimTypeFilter
  updatedAt: DateTimeFilter
  year: IntFilter
}

input GitPOAPWhereUniqueInput {
  id: Int
  poapEventId: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createClaim(data: ClaimCreateInput!): Claim!
  createGitPOAP(data: GitPOAPCreateInput!): GitPOAP!
  createManyClaim(data: [ClaimCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyGitPOAP(data: [GitPOAPCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOrganization(data: [OrganizationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProfile(data: [ProfileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRepo(data: [RepoCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createProfile(data: ProfileCreateInput!): Profile!
  createRepo(data: RepoCreateInput!): Repo!
  createUser(data: UserCreateInput!): User!
  deleteClaim(where: ClaimWhereUniqueInput!): Claim
  deleteGitPOAP(where: GitPOAPWhereUniqueInput!): GitPOAP
  deleteManyClaim(where: ClaimWhereInput): AffectedRowsOutput!
  deleteManyGitPOAP(where: GitPOAPWhereInput): AffectedRowsOutput!
  deleteManyOrganization(where: OrganizationWhereInput): AffectedRowsOutput!
  deleteManyProfile(where: ProfileWhereInput): AffectedRowsOutput!
  deleteManyRepo(where: RepoWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteRepo(where: RepoWhereUniqueInput!): Repo
  deleteUser(where: UserWhereUniqueInput!): User
  updateClaim(data: ClaimUpdateInput!, where: ClaimWhereUniqueInput!): Claim
  updateGitPOAP(data: GitPOAPUpdateInput!, where: GitPOAPWhereUniqueInput!): GitPOAP
  updateManyClaim(data: ClaimUpdateManyMutationInput!, where: ClaimWhereInput): AffectedRowsOutput!
  updateManyGitPOAP(data: GitPOAPUpdateManyMutationInput!, where: GitPOAPWhereInput): AffectedRowsOutput!
  updateManyOrganization(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): AffectedRowsOutput!
  updateManyProfile(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): AffectedRowsOutput!
  updateManyRepo(data: RepoUpdateManyMutationInput!, where: RepoWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateRepo(data: RepoUpdateInput!, where: RepoWhereUniqueInput!): Repo
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertClaim(create: ClaimCreateInput!, update: ClaimUpdateInput!, where: ClaimWhereUniqueInput!): Claim!
  upsertGitPOAP(create: GitPOAPCreateInput!, update: GitPOAPUpdateInput!, where: GitPOAPWhereUniqueInput!): GitPOAP!
  upsertOrganization(create: OrganizationCreateInput!, update: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization!
  upsertProfile(create: ProfileCreateInput!, update: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  upsertRepo(create: RepoCreateInput!, update: RepoUpdateInput!, where: RepoWhereUniqueInput!): Repo!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumClaimStatusFilter {
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusFilter
  notIn: [ClaimStatus!]
}

input NestedEnumClaimStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimStatusFilter
  _min: NestedEnumClaimStatusFilter
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusWithAggregatesFilter
  notIn: [ClaimStatus!]
}

input NestedEnumClaimTypeFilter {
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeFilter
  notIn: [ClaimType!]
}

input NestedEnumClaimTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimTypeFilter
  _min: NestedEnumClaimTypeFilter
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeWithAggregatesFilter
  notIn: [ClaimType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Organization {
  _count: OrganizationCount
  createdAt: DateTime!
  githubOrgId: Int!
  id: Int!
  name: String!
  repos(cursor: RepoWhereUniqueInput, distinct: [RepoScalarFieldEnum!], orderBy: [RepoOrderByWithRelationInput!], skip: Int, take: Int, where: RepoWhereInput): [Repo!]!
  updatedAt: DateTime!
}

type OrganizationAvgAggregate {
  githubOrgId: Float
  id: Float
}

input OrganizationAvgOrderByAggregateInput {
  githubOrgId: SortOrder
  id: SortOrder
}

type OrganizationCount {
  repos: Int!
}

type OrganizationCountAggregate {
  _all: Int!
  createdAt: Int!
  githubOrgId: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input OrganizationCountOrderByAggregateInput {
  createdAt: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input OrganizationCreateInput {
  createdAt: DateTime
  githubOrgId: Int!
  name: String!
  repos: RepoCreateNestedManyWithoutOrganizationInput
  updatedAt: DateTime
}

input OrganizationCreateManyInput {
  createdAt: DateTime
  githubOrgId: Int!
  id: Int
  name: String!
  updatedAt: DateTime
}

input OrganizationCreateNestedOneWithoutReposInput {
  connect: OrganizationWhereUniqueInput
  connectOrCreate: OrganizationCreateOrConnectWithoutReposInput
  create: OrganizationCreateWithoutReposInput
}

input OrganizationCreateOrConnectWithoutReposInput {
  create: OrganizationCreateWithoutReposInput!
  where: OrganizationWhereUniqueInput!
}

input OrganizationCreateWithoutReposInput {
  createdAt: DateTime
  githubOrgId: Int!
  name: String!
  updatedAt: DateTime
}

type OrganizationGroupBy {
  _avg: OrganizationAvgAggregate
  _count: OrganizationCountAggregate
  _max: OrganizationMaxAggregate
  _min: OrganizationMinAggregate
  _sum: OrganizationSumAggregate
  createdAt: DateTime!
  githubOrgId: Int!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type OrganizationMaxAggregate {
  createdAt: DateTime
  githubOrgId: Int
  id: Int
  name: String
  updatedAt: DateTime
}

input OrganizationMaxOrderByAggregateInput {
  createdAt: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type OrganizationMinAggregate {
  createdAt: DateTime
  githubOrgId: Int
  id: Int
  name: String
  updatedAt: DateTime
}

input OrganizationMinOrderByAggregateInput {
  createdAt: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input OrganizationOrderByWithAggregationInput {
  _avg: OrganizationAvgOrderByAggregateInput
  _count: OrganizationCountOrderByAggregateInput
  _max: OrganizationMaxOrderByAggregateInput
  _min: OrganizationMinOrderByAggregateInput
  _sum: OrganizationSumOrderByAggregateInput
  createdAt: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input OrganizationOrderByWithRelationInput {
  createdAt: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  repos: RepoOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input OrganizationRelationFilter {
  is: OrganizationWhereInput
  isNot: OrganizationWhereInput
}

enum OrganizationScalarFieldEnum {
  createdAt
  githubOrgId
  id
  name
  updatedAt
}

input OrganizationScalarWhereWithAggregatesInput {
  AND: [OrganizationScalarWhereWithAggregatesInput!]
  NOT: [OrganizationScalarWhereWithAggregatesInput!]
  OR: [OrganizationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  githubOrgId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type OrganizationSumAggregate {
  githubOrgId: Int
  id: Int
}

input OrganizationSumOrderByAggregateInput {
  githubOrgId: SortOrder
  id: SortOrder
}

input OrganizationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  githubOrgId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  repos: RepoUpdateManyWithoutOrganizationInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrganizationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  githubOrgId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrganizationUpdateOneWithoutReposInput {
  connect: OrganizationWhereUniqueInput
  connectOrCreate: OrganizationCreateOrConnectWithoutReposInput
  create: OrganizationCreateWithoutReposInput
  delete: Boolean
  disconnect: Boolean
  update: OrganizationUpdateWithoutReposInput
  upsert: OrganizationUpsertWithoutReposInput
}

input OrganizationUpdateWithoutReposInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  githubOrgId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrganizationUpsertWithoutReposInput {
  create: OrganizationCreateWithoutReposInput!
  update: OrganizationUpdateWithoutReposInput!
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  createdAt: DateTimeFilter
  githubOrgId: IntFilter
  id: IntFilter
  name: StringFilter
  repos: RepoListRelationFilter
  updatedAt: DateTimeFilter
}

input OrganizationWhereUniqueInput {
  githubOrgId: Int
  id: Int
}

type Profile {
  address: String!
  bannerImageUrl: String
  bio: String!
  createdAt: DateTime!
  id: Int!
  name: String
  profileImageUrl: String
  updatedAt: DateTime!
}

type ProfileAvgAggregate {
  id: Float
}

input ProfileAvgOrderByAggregateInput {
  id: SortOrder
}

type ProfileCountAggregate {
  _all: Int!
  address: Int!
  bannerImageUrl: Int!
  bio: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  profileImageUrl: Int!
  updatedAt: Int!
}

input ProfileCountOrderByAggregateInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileImageUrl: SortOrder
  updatedAt: SortOrder
}

input ProfileCreateInput {
  address: String!
  bannerImageUrl: String
  bio: String!
  createdAt: DateTime
  name: String
  profileImageUrl: String
  updatedAt: DateTime
}

input ProfileCreateManyInput {
  address: String!
  bannerImageUrl: String
  bio: String!
  createdAt: DateTime
  id: Int
  name: String
  profileImageUrl: String
  updatedAt: DateTime
}

type ProfileGroupBy {
  _avg: ProfileAvgAggregate
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  _sum: ProfileSumAggregate
  address: String!
  bannerImageUrl: String
  bio: String!
  createdAt: DateTime!
  id: Int!
  name: String
  profileImageUrl: String
  updatedAt: DateTime!
}

type ProfileMaxAggregate {
  address: String
  bannerImageUrl: String
  bio: String
  createdAt: DateTime
  id: Int
  name: String
  profileImageUrl: String
  updatedAt: DateTime
}

input ProfileMaxOrderByAggregateInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileImageUrl: SortOrder
  updatedAt: SortOrder
}

type ProfileMinAggregate {
  address: String
  bannerImageUrl: String
  bio: String
  createdAt: DateTime
  id: Int
  name: String
  profileImageUrl: String
  updatedAt: DateTime
}

input ProfileMinOrderByAggregateInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileImageUrl: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _avg: ProfileAvgOrderByAggregateInput
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  _sum: ProfileSumOrderByAggregateInput
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileImageUrl: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByWithRelationInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  profileImageUrl: SortOrder
  updatedAt: SortOrder
}

enum ProfileScalarFieldEnum {
  address
  bannerImageUrl
  bio
  createdAt
  id
  name
  profileImageUrl
  updatedAt
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  address: StringWithAggregatesFilter
  bannerImageUrl: StringNullableWithAggregatesFilter
  bio: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  profileImageUrl: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ProfileSumAggregate {
  id: Int
}

input ProfileSumOrderByAggregateInput {
  id: SortOrder
}

input ProfileUpdateInput {
  address: StringFieldUpdateOperationsInput
  bannerImageUrl: NullableStringFieldUpdateOperationsInput
  bio: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateManyMutationInput {
  address: StringFieldUpdateOperationsInput
  bannerImageUrl: NullableStringFieldUpdateOperationsInput
  bio: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  profileImageUrl: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  address: StringFilter
  bannerImageUrl: StringNullableFilter
  bio: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringNullableFilter
  profileImageUrl: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProfileWhereUniqueInput {
  address: String
  id: Int
}

type Query {
  aggregateClaim(cursor: ClaimWhereUniqueInput, orderBy: [ClaimOrderByWithRelationInput!], skip: Int, take: Int, where: ClaimWhereInput): AggregateClaim!
  aggregateGitPOAP(cursor: GitPOAPWhereUniqueInput, orderBy: [GitPOAPOrderByWithRelationInput!], skip: Int, take: Int, where: GitPOAPWhereInput): AggregateGitPOAP!
  aggregateOrganization(cursor: OrganizationWhereUniqueInput, orderBy: [OrganizationOrderByWithRelationInput!], skip: Int, take: Int, where: OrganizationWhereInput): AggregateOrganization!
  aggregateProfile(cursor: ProfileWhereUniqueInput, orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): AggregateProfile!
  aggregateRepo(cursor: RepoWhereUniqueInput, orderBy: [RepoOrderByWithRelationInput!], skip: Int, take: Int, where: RepoWhereInput): AggregateRepo!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  claim(where: ClaimWhereUniqueInput!): Claim
  claims(cursor: ClaimWhereUniqueInput, distinct: [ClaimScalarFieldEnum!], orderBy: [ClaimOrderByWithRelationInput!], skip: Int, take: Int, where: ClaimWhereInput): [Claim!]!
  findFirstClaim(cursor: ClaimWhereUniqueInput, distinct: [ClaimScalarFieldEnum!], orderBy: [ClaimOrderByWithRelationInput!], skip: Int, take: Int, where: ClaimWhereInput): Claim
  findFirstGitPOAP(cursor: GitPOAPWhereUniqueInput, distinct: [GitPOAPScalarFieldEnum!], orderBy: [GitPOAPOrderByWithRelationInput!], skip: Int, take: Int, where: GitPOAPWhereInput): GitPOAP
  findFirstOrganization(cursor: OrganizationWhereUniqueInput, distinct: [OrganizationScalarFieldEnum!], orderBy: [OrganizationOrderByWithRelationInput!], skip: Int, take: Int, where: OrganizationWhereInput): Organization
  findFirstProfile(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): Profile
  findFirstRepo(cursor: RepoWhereUniqueInput, distinct: [RepoScalarFieldEnum!], orderBy: [RepoOrderByWithRelationInput!], skip: Int, take: Int, where: RepoWhereInput): Repo
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  gitPOAP(where: GitPOAPWhereUniqueInput!): GitPOAP
  gitPOAPS(cursor: GitPOAPWhereUniqueInput, distinct: [GitPOAPScalarFieldEnum!], orderBy: [GitPOAPOrderByWithRelationInput!], skip: Int, take: Int, where: GitPOAPWhereInput): [GitPOAP!]!
  groupByClaim(by: [ClaimScalarFieldEnum!]!, having: ClaimScalarWhereWithAggregatesInput, orderBy: [ClaimOrderByWithAggregationInput!], skip: Int, take: Int, where: ClaimWhereInput): [ClaimGroupBy!]!
  groupByGitPOAP(by: [GitPOAPScalarFieldEnum!]!, having: GitPOAPScalarWhereWithAggregatesInput, orderBy: [GitPOAPOrderByWithAggregationInput!], skip: Int, take: Int, where: GitPOAPWhereInput): [GitPOAPGroupBy!]!
  groupByOrganization(by: [OrganizationScalarFieldEnum!]!, having: OrganizationScalarWhereWithAggregatesInput, orderBy: [OrganizationOrderByWithAggregationInput!], skip: Int, take: Int, where: OrganizationWhereInput): [OrganizationGroupBy!]!
  groupByProfile(by: [ProfileScalarFieldEnum!]!, having: ProfileScalarWhereWithAggregatesInput, orderBy: [ProfileOrderByWithAggregationInput!], skip: Int, take: Int, where: ProfileWhereInput): [ProfileGroupBy!]!
  groupByRepo(by: [RepoScalarFieldEnum!]!, having: RepoScalarWhereWithAggregatesInput, orderBy: [RepoOrderByWithAggregationInput!], skip: Int, take: Int, where: RepoWhereInput): [RepoGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(cursor: OrganizationWhereUniqueInput, distinct: [OrganizationScalarFieldEnum!], orderBy: [OrganizationOrderByWithRelationInput!], skip: Int, take: Int, where: OrganizationWhereInput): [Organization!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(cursor: ProfileWhereUniqueInput, distinct: [ProfileScalarFieldEnum!], orderBy: [ProfileOrderByWithRelationInput!], skip: Int, take: Int, where: ProfileWhereInput): [Profile!]!
  repo(where: RepoWhereUniqueInput!): Repo
  repos(cursor: RepoWhereUniqueInput, distinct: [RepoScalarFieldEnum!], orderBy: [RepoOrderByWithRelationInput!], skip: Int, take: Int, where: RepoWhereInput): [Repo!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Repo {
  Organization: Organization
  _count: RepoCount
  createdAt: DateTime!
  gitPOAPs(cursor: GitPOAPWhereUniqueInput, distinct: [GitPOAPScalarFieldEnum!], orderBy: [GitPOAPOrderByWithRelationInput!], skip: Int, take: Int, where: GitPOAPWhereInput): [GitPOAP!]!
  githubRepoId: Int!
  id: Int!
  name: String!
  organizationId: Int
  updatedAt: DateTime!
}

type RepoAvgAggregate {
  githubRepoId: Float
  id: Float
  organizationId: Float
}

input RepoAvgOrderByAggregateInput {
  githubRepoId: SortOrder
  id: SortOrder
  organizationId: SortOrder
}

type RepoCount {
  gitPOAPs: Int!
}

type RepoCountAggregate {
  _all: Int!
  createdAt: Int!
  githubRepoId: Int!
  id: Int!
  name: Int!
  organizationId: Int!
  updatedAt: Int!
}

input RepoCountOrderByAggregateInput {
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoCreateInput {
  Organization: OrganizationCreateNestedOneWithoutReposInput
  createdAt: DateTime
  gitPOAPs: GitPOAPCreateNestedManyWithoutRepoInput
  githubRepoId: Int!
  name: String!
  updatedAt: DateTime
}

input RepoCreateManyInput {
  createdAt: DateTime
  githubRepoId: Int!
  id: Int
  name: String!
  organizationId: Int
  updatedAt: DateTime
}

input RepoCreateManyOrganizationInput {
  createdAt: DateTime
  githubRepoId: Int!
  id: Int
  name: String!
  updatedAt: DateTime
}

input RepoCreateManyOrganizationInputEnvelope {
  data: [RepoCreateManyOrganizationInput!]!
  skipDuplicates: Boolean
}

input RepoCreateNestedManyWithoutOrganizationInput {
  connect: [RepoWhereUniqueInput!]
  connectOrCreate: [RepoCreateOrConnectWithoutOrganizationInput!]
  create: [RepoCreateWithoutOrganizationInput!]
  createMany: RepoCreateManyOrganizationInputEnvelope
}

input RepoCreateNestedOneWithoutGitPOAPsInput {
  connect: RepoWhereUniqueInput
  connectOrCreate: RepoCreateOrConnectWithoutGitPOAPsInput
  create: RepoCreateWithoutGitPOAPsInput
}

input RepoCreateOrConnectWithoutGitPOAPsInput {
  create: RepoCreateWithoutGitPOAPsInput!
  where: RepoWhereUniqueInput!
}

input RepoCreateOrConnectWithoutOrganizationInput {
  create: RepoCreateWithoutOrganizationInput!
  where: RepoWhereUniqueInput!
}

input RepoCreateWithoutGitPOAPsInput {
  Organization: OrganizationCreateNestedOneWithoutReposInput
  createdAt: DateTime
  githubRepoId: Int!
  name: String!
  updatedAt: DateTime
}

input RepoCreateWithoutOrganizationInput {
  createdAt: DateTime
  gitPOAPs: GitPOAPCreateNestedManyWithoutRepoInput
  githubRepoId: Int!
  name: String!
  updatedAt: DateTime
}

type RepoGroupBy {
  _avg: RepoAvgAggregate
  _count: RepoCountAggregate
  _max: RepoMaxAggregate
  _min: RepoMinAggregate
  _sum: RepoSumAggregate
  createdAt: DateTime!
  githubRepoId: Int!
  id: Int!
  name: String!
  organizationId: Int
  updatedAt: DateTime!
}

input RepoListRelationFilter {
  every: RepoWhereInput
  none: RepoWhereInput
  some: RepoWhereInput
}

type RepoMaxAggregate {
  createdAt: DateTime
  githubRepoId: Int
  id: Int
  name: String
  organizationId: Int
  updatedAt: DateTime
}

input RepoMaxOrderByAggregateInput {
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

type RepoMinAggregate {
  createdAt: DateTime
  githubRepoId: Int
  id: Int
  name: String
  organizationId: Int
  updatedAt: DateTime
}

input RepoMinOrderByAggregateInput {
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoOrderByRelationAggregateInput {
  _count: SortOrder
}

input RepoOrderByWithAggregationInput {
  _avg: RepoAvgOrderByAggregateInput
  _count: RepoCountOrderByAggregateInput
  _max: RepoMaxOrderByAggregateInput
  _min: RepoMinOrderByAggregateInput
  _sum: RepoSumOrderByAggregateInput
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoOrderByWithRelationInput {
  Organization: OrganizationOrderByWithRelationInput
  createdAt: SortOrder
  gitPOAPs: GitPOAPOrderByRelationAggregateInput
  githubRepoId: SortOrder
  id: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoRelationFilter {
  is: RepoWhereInput
  isNot: RepoWhereInput
}

enum RepoScalarFieldEnum {
  createdAt
  githubRepoId
  id
  name
  organizationId
  updatedAt
}

input RepoScalarWhereInput {
  AND: [RepoScalarWhereInput!]
  NOT: [RepoScalarWhereInput!]
  OR: [RepoScalarWhereInput!]
  createdAt: DateTimeFilter
  githubRepoId: IntFilter
  id: IntFilter
  name: StringFilter
  organizationId: IntNullableFilter
  updatedAt: DateTimeFilter
}

input RepoScalarWhereWithAggregatesInput {
  AND: [RepoScalarWhereWithAggregatesInput!]
  NOT: [RepoScalarWhereWithAggregatesInput!]
  OR: [RepoScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  githubRepoId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  organizationId: IntNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type RepoSumAggregate {
  githubRepoId: Int
  id: Int
  organizationId: Int
}

input RepoSumOrderByAggregateInput {
  githubRepoId: SortOrder
  id: SortOrder
  organizationId: SortOrder
}

input RepoUpdateInput {
  Organization: OrganizationUpdateOneWithoutReposInput
  createdAt: DateTimeFieldUpdateOperationsInput
  gitPOAPs: GitPOAPUpdateManyWithoutRepoInput
  githubRepoId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RepoUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  githubRepoId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RepoUpdateManyWithWhereWithoutOrganizationInput {
  data: RepoUpdateManyMutationInput!
  where: RepoScalarWhereInput!
}

input RepoUpdateManyWithoutOrganizationInput {
  connect: [RepoWhereUniqueInput!]
  connectOrCreate: [RepoCreateOrConnectWithoutOrganizationInput!]
  create: [RepoCreateWithoutOrganizationInput!]
  createMany: RepoCreateManyOrganizationInputEnvelope
  delete: [RepoWhereUniqueInput!]
  deleteMany: [RepoScalarWhereInput!]
  disconnect: [RepoWhereUniqueInput!]
  set: [RepoWhereUniqueInput!]
  update: [RepoUpdateWithWhereUniqueWithoutOrganizationInput!]
  updateMany: [RepoUpdateManyWithWhereWithoutOrganizationInput!]
  upsert: [RepoUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input RepoUpdateOneRequiredWithoutGitPOAPsInput {
  connect: RepoWhereUniqueInput
  connectOrCreate: RepoCreateOrConnectWithoutGitPOAPsInput
  create: RepoCreateWithoutGitPOAPsInput
  update: RepoUpdateWithoutGitPOAPsInput
  upsert: RepoUpsertWithoutGitPOAPsInput
}

input RepoUpdateWithWhereUniqueWithoutOrganizationInput {
  data: RepoUpdateWithoutOrganizationInput!
  where: RepoWhereUniqueInput!
}

input RepoUpdateWithoutGitPOAPsInput {
  Organization: OrganizationUpdateOneWithoutReposInput
  createdAt: DateTimeFieldUpdateOperationsInput
  githubRepoId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RepoUpdateWithoutOrganizationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  gitPOAPs: GitPOAPUpdateManyWithoutRepoInput
  githubRepoId: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RepoUpsertWithWhereUniqueWithoutOrganizationInput {
  create: RepoCreateWithoutOrganizationInput!
  update: RepoUpdateWithoutOrganizationInput!
  where: RepoWhereUniqueInput!
}

input RepoUpsertWithoutGitPOAPsInput {
  create: RepoCreateWithoutGitPOAPsInput!
  update: RepoUpdateWithoutGitPOAPsInput!
}

input RepoWhereInput {
  AND: [RepoWhereInput!]
  NOT: [RepoWhereInput!]
  OR: [RepoWhereInput!]
  Organization: OrganizationRelationFilter
  createdAt: DateTimeFilter
  gitPOAPs: GitPOAPListRelationFilter
  githubRepoId: IntFilter
  id: IntFilter
  name: StringFilter
  organizationId: IntNullableFilter
  updatedAt: DateTimeFilter
}

input RepoWhereUniqueInput {
  githubRepoId: Int
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  claims(cursor: ClaimWhereUniqueInput, distinct: [ClaimScalarFieldEnum!], orderBy: [ClaimOrderByWithRelationInput!], skip: Int, take: Int, where: ClaimWhereInput): [Claim!]!
  createdAt: DateTime!
  githubHandle: String!
  githubId: Int!
  id: Int!
  oauthToken: String!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  githubId: Float
  id: Float
}

input UserAvgOrderByAggregateInput {
  githubId: SortOrder
  id: SortOrder
}

type UserCount {
  claims: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  githubHandle: Int!
  githubId: Int!
  id: Int!
  oauthToken: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  oauthToken: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  claims: ClaimCreateNestedManyWithoutUserInput
  createdAt: DateTime
  githubHandle: String!
  githubId: Int!
  oauthToken: String!
  updatedAt: DateTime
}

input UserCreateManyInput {
  createdAt: DateTime
  githubHandle: String!
  githubId: Int!
  id: Int
  oauthToken: String!
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutClaimsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClaimsInput
  create: UserCreateWithoutClaimsInput
}

input UserCreateOrConnectWithoutClaimsInput {
  create: UserCreateWithoutClaimsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutClaimsInput {
  createdAt: DateTime
  githubHandle: String!
  githubId: Int!
  oauthToken: String!
  updatedAt: DateTime
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  createdAt: DateTime!
  githubHandle: String!
  githubId: Int!
  id: Int!
  oauthToken: String!
  updatedAt: DateTime!
}

type UserMaxAggregate {
  createdAt: DateTime
  githubHandle: String
  githubId: Int
  id: Int
  oauthToken: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  oauthToken: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  githubHandle: String
  githubId: Int
  id: Int
  oauthToken: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  oauthToken: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  oauthToken: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  claims: ClaimOrderByRelationAggregateInput
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  oauthToken: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  githubHandle
  githubId
  id
  oauthToken
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  githubHandle: StringWithAggregatesFilter
  githubId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  oauthToken: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  githubId: Int
  id: Int
}

input UserSumOrderByAggregateInput {
  githubId: SortOrder
  id: SortOrder
}

input UserUpdateInput {
  claims: ClaimUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  githubHandle: StringFieldUpdateOperationsInput
  githubId: IntFieldUpdateOperationsInput
  oauthToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  githubHandle: StringFieldUpdateOperationsInput
  githubId: IntFieldUpdateOperationsInput
  oauthToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutClaimsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClaimsInput
  create: UserCreateWithoutClaimsInput
  update: UserUpdateWithoutClaimsInput
  upsert: UserUpsertWithoutClaimsInput
}

input UserUpdateWithoutClaimsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  githubHandle: StringFieldUpdateOperationsInput
  githubId: IntFieldUpdateOperationsInput
  oauthToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutClaimsInput {
  create: UserCreateWithoutClaimsInput!
  update: UserUpdateWithoutClaimsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  claims: ClaimListRelationFilter
  createdAt: DateTimeFilter
  githubHandle: StringFilter
  githubId: IntFilter
  id: IntFilter
  oauthToken: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  githubId: Int
  id: Int
}
