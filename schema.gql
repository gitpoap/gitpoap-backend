# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateClaim {
  _avg: ClaimAvgAggregate
  _count: ClaimCountAggregate
  _max: ClaimMaxAggregate
  _min: ClaimMinAggregate
  _sum: ClaimSumAggregate
}

type AggregateFeaturedPOAP {
  _avg: FeaturedPOAPAvgAggregate
  _count: FeaturedPOAPCountAggregate
  _max: FeaturedPOAPMaxAggregate
  _min: FeaturedPOAPMinAggregate
  _sum: FeaturedPOAPSumAggregate
}

type AggregateGitPOAP {
  _avg: GitPOAPAvgAggregate
  _count: GitPOAPCountAggregate
  _max: GitPOAPMaxAggregate
  _min: GitPOAPMinAggregate
  _sum: GitPOAPSumAggregate
}

type AggregateGithubPullRequest {
  _avg: GithubPullRequestAvgAggregate
  _count: GithubPullRequestCountAggregate
  _max: GithubPullRequestMaxAggregate
  _min: GithubPullRequestMinAggregate
  _sum: GithubPullRequestSumAggregate
}

type AggregateOrganization {
  _avg: OrganizationAvgAggregate
  _count: OrganizationCountAggregate
  _max: OrganizationMaxAggregate
  _min: OrganizationMinAggregate
  _sum: OrganizationSumAggregate
}

type AggregateProfile {
  _avg: ProfileAvgAggregate
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  _sum: ProfileSumAggregate
}

type AggregateRepo {
  _avg: RepoAvgAggregate
  _count: RepoCountAggregate
  _max: RepoMaxAggregate
  _min: RepoMinAggregate
  _sum: RepoSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Claim {
  address: String
  createdAt: DateTime!
  gitPOAP: GitPOAP!
  gitPOAPId: Int!
  id: Int!
  mintedAt: DateTime
  poapTokenId: String
  pullRequestEarned: GithubPullRequest
  pullRequestEarnedId: Int
  status: ClaimStatus!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type ClaimAvgAggregate {
  gitPOAPId: Float
  id: Float
  pullRequestEarnedId: Float
  userId: Float
}

input ClaimAvgOrderByAggregateInput {
  gitPOAPId: SortOrder
  id: SortOrder
  pullRequestEarnedId: SortOrder
  userId: SortOrder
}

type ClaimCountAggregate {
  _all: Int!
  address: Int!
  createdAt: Int!
  gitPOAPId: Int!
  id: Int!
  mintedAt: Int!
  poapTokenId: Int!
  pullRequestEarnedId: Int!
  qrHash: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
}

input ClaimCountOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  mintedAt: SortOrder
  poapTokenId: SortOrder
  pullRequestEarnedId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClaimGitPOAPIdUserIdCompoundUniqueInput {
  gitPOAPId: Int!
  userId: Int!
}

type ClaimGroupBy {
  _avg: ClaimAvgAggregate
  _count: ClaimCountAggregate
  _max: ClaimMaxAggregate
  _min: ClaimMinAggregate
  _sum: ClaimSumAggregate
  address: String
  createdAt: DateTime!
  gitPOAPId: Int!
  id: Int!
  mintedAt: DateTime
  poapTokenId: String
  pullRequestEarnedId: Int
  qrHash: String
  status: ClaimStatus!
  updatedAt: DateTime!
  userId: Int!
}

input ClaimListRelationFilter {
  every: ClaimWhereInput
  none: ClaimWhereInput
  some: ClaimWhereInput
}

type ClaimMaxAggregate {
  address: String
  createdAt: DateTime
  gitPOAPId: Int
  id: Int
  mintedAt: DateTime
  poapTokenId: String
  pullRequestEarnedId: Int
  qrHash: String
  status: ClaimStatus
  updatedAt: DateTime
  userId: Int
}

input ClaimMaxOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  mintedAt: SortOrder
  poapTokenId: SortOrder
  pullRequestEarnedId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ClaimMinAggregate {
  address: String
  createdAt: DateTime
  gitPOAPId: Int
  id: Int
  mintedAt: DateTime
  poapTokenId: String
  pullRequestEarnedId: Int
  qrHash: String
  status: ClaimStatus
  updatedAt: DateTime
  userId: Int
}

input ClaimMinOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  mintedAt: SortOrder
  poapTokenId: SortOrder
  pullRequestEarnedId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimOrderByWithAggregationInput {
  _avg: ClaimAvgOrderByAggregateInput
  _count: ClaimCountOrderByAggregateInput
  _max: ClaimMaxOrderByAggregateInput
  _min: ClaimMinOrderByAggregateInput
  _sum: ClaimSumOrderByAggregateInput
  address: SortOrder
  createdAt: SortOrder
  gitPOAPId: SortOrder
  id: SortOrder
  mintedAt: SortOrder
  poapTokenId: SortOrder
  pullRequestEarnedId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClaimOrderByWithRelationInput {
  address: SortOrder
  createdAt: SortOrder
  gitPOAP: GitPOAPOrderByWithRelationInput
  gitPOAPId: SortOrder
  id: SortOrder
  mintedAt: SortOrder
  poapTokenId: SortOrder
  pullRequestEarned: GithubPullRequestOrderByWithRelationInput
  pullRequestEarnedId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ClaimScalarFieldEnum {
  address
  createdAt
  gitPOAPId
  id
  mintedAt
  poapTokenId
  pullRequestEarnedId
  qrHash
  status
  updatedAt
  userId
}

input ClaimScalarWhereWithAggregatesInput {
  AND: [ClaimScalarWhereWithAggregatesInput!]
  NOT: [ClaimScalarWhereWithAggregatesInput!]
  OR: [ClaimScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  gitPOAPId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  mintedAt: DateTimeNullableWithAggregatesFilter
  poapTokenId: StringNullableWithAggregatesFilter
  pullRequestEarnedId: IntNullableWithAggregatesFilter
  status: EnumClaimStatusWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

enum ClaimStatus {
  CLAIMED
  MINTING
  PENDING
  UNCLAIMED
}

type ClaimSumAggregate {
  gitPOAPId: Int
  id: Int
  pullRequestEarnedId: Int
  userId: Int
}

input ClaimSumOrderByAggregateInput {
  gitPOAPId: SortOrder
  id: SortOrder
  pullRequestEarnedId: SortOrder
  userId: SortOrder
}

enum ClaimType {
  ANNUAL
  MANUAL
  QUARTERLY
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  address: StringNullableFilter
  createdAt: DateTimeFilter
  gitPOAP: GitPOAPRelationFilter
  gitPOAPId: IntFilter
  id: IntFilter
  mintedAt: DateTimeNullableFilter
  poapTokenId: StringNullableFilter
  pullRequestEarned: GithubPullRequestRelationFilter
  pullRequestEarnedId: IntNullableFilter
  status: EnumClaimStatusFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ClaimWhereUniqueInput {
  gitPOAPId_userId: ClaimGitPOAPIdUserIdCompoundUniqueInput
  id: Int
  poapTokenId: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumClaimStatusFilter {
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusFilter
  notIn: [ClaimStatus!]
}

input EnumClaimStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimStatusFilter
  _min: NestedEnumClaimStatusFilter
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusWithAggregatesFilter
  notIn: [ClaimStatus!]
}

input EnumClaimTypeFilter {
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeFilter
  notIn: [ClaimType!]
}

input EnumClaimTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimTypeFilter
  _min: NestedEnumClaimTypeFilter
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeWithAggregatesFilter
  notIn: [ClaimType!]
}

input EnumGitPOAPStatusFilter {
  equals: GitPOAPStatus
  in: [GitPOAPStatus!]
  not: NestedEnumGitPOAPStatusFilter
  notIn: [GitPOAPStatus!]
}

input EnumGitPOAPStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumGitPOAPStatusFilter
  _min: NestedEnumGitPOAPStatusFilter
  equals: GitPOAPStatus
  in: [GitPOAPStatus!]
  not: NestedEnumGitPOAPStatusWithAggregatesFilter
  notIn: [GitPOAPStatus!]
}

type Event {
  _count: EventCount
  createdAt: DateTime!
  description: String
  endDate: DateTime!
  githubHandle: String
  id: Int!
  imageUrl: String
  location: String!
  name: String!
  organization: String!
  siteUrl: String
  startDate: DateTime!
  twitterHandle: String
  updatedAt: DateTime!
}

type EventCount {
  GitPOAP: Int!
}

input EventOrderByWithRelationInput {
  GitPOAP: GitPOAPOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  endDate: SortOrder
  githubHandle: SortOrder
  id: SortOrder
  imageUrl: SortOrder
  location: SortOrder
  name: SortOrder
  organization: SortOrder
  siteUrl: SortOrder
  startDate: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  GitPOAP: GitPOAPListRelationFilter
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  endDate: DateTimeFilter
  githubHandle: StringNullableFilter
  id: IntFilter
  imageUrl: StringNullableFilter
  location: StringFilter
  name: StringFilter
  organization: StringFilter
  siteUrl: StringNullableFilter
  startDate: DateTimeFilter
  twitterHandle: StringNullableFilter
  updatedAt: DateTimeFilter
}

type FeaturedPOAP {
  id: Int!
  poapTokenId: String!
  profile: Profile!
  profileId: Int!
}

type FeaturedPOAPAvgAggregate {
  id: Float
  profileId: Float
}

input FeaturedPOAPAvgOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

type FeaturedPOAPCountAggregate {
  _all: Int!
  id: Int!
  poapTokenId: Int!
  profileId: Int!
}

input FeaturedPOAPCountOrderByAggregateInput {
  id: SortOrder
  poapTokenId: SortOrder
  profileId: SortOrder
}

type FeaturedPOAPGroupBy {
  _avg: FeaturedPOAPAvgAggregate
  _count: FeaturedPOAPCountAggregate
  _max: FeaturedPOAPMaxAggregate
  _min: FeaturedPOAPMinAggregate
  _sum: FeaturedPOAPSumAggregate
  id: Int!
  poapTokenId: String!
  profileId: Int!
}

input FeaturedPOAPListRelationFilter {
  every: FeaturedPOAPWhereInput
  none: FeaturedPOAPWhereInput
  some: FeaturedPOAPWhereInput
}

type FeaturedPOAPMaxAggregate {
  id: Int
  poapTokenId: String
  profileId: Int
}

input FeaturedPOAPMaxOrderByAggregateInput {
  id: SortOrder
  poapTokenId: SortOrder
  profileId: SortOrder
}

type FeaturedPOAPMinAggregate {
  id: Int
  poapTokenId: String
  profileId: Int
}

input FeaturedPOAPMinOrderByAggregateInput {
  id: SortOrder
  poapTokenId: SortOrder
  profileId: SortOrder
}

input FeaturedPOAPOrderByRelationAggregateInput {
  _count: SortOrder
}

input FeaturedPOAPOrderByWithAggregationInput {
  _avg: FeaturedPOAPAvgOrderByAggregateInput
  _count: FeaturedPOAPCountOrderByAggregateInput
  _max: FeaturedPOAPMaxOrderByAggregateInput
  _min: FeaturedPOAPMinOrderByAggregateInput
  _sum: FeaturedPOAPSumOrderByAggregateInput
  id: SortOrder
  poapTokenId: SortOrder
  profileId: SortOrder
}

input FeaturedPOAPOrderByWithRelationInput {
  id: SortOrder
  poapTokenId: SortOrder
  profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
}

input FeaturedPOAPPoapTokenIdProfileIdCompoundUniqueInput {
  poapTokenId: String!
  profileId: Int!
}

enum FeaturedPOAPScalarFieldEnum {
  id
  poapTokenId
  profileId
}

input FeaturedPOAPScalarWhereWithAggregatesInput {
  AND: [FeaturedPOAPScalarWhereWithAggregatesInput!]
  NOT: [FeaturedPOAPScalarWhereWithAggregatesInput!]
  OR: [FeaturedPOAPScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  poapTokenId: StringWithAggregatesFilter
  profileId: IntWithAggregatesFilter
}

type FeaturedPOAPSumAggregate {
  id: Int
  profileId: Int
}

input FeaturedPOAPSumOrderByAggregateInput {
  id: SortOrder
  profileId: SortOrder
}

input FeaturedPOAPWhereInput {
  AND: [FeaturedPOAPWhereInput!]
  NOT: [FeaturedPOAPWhereInput!]
  OR: [FeaturedPOAPWhereInput!]
  id: IntFilter
  poapTokenId: StringFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
}

input FeaturedPOAPWhereUniqueInput {
  id: Int
  poapTokenId: String
  poapTokenId_profileId: FeaturedPOAPPoapTokenIdProfileIdCompoundUniqueInput
}

type FullClaimData {
  claim: Claim!
  event: POAPEvent!
}

type FullGitPOAPEventData {
  event: POAPEvent!
  gitPOAP: GitPOAP!
}

type GitPOAP {
  _count: GitPOAPCount
  claims(
    cursor: ClaimWhereUniqueInput
    distinct: [ClaimScalarFieldEnum!]
    orderBy: [ClaimOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): [Claim!]!
  createdAt: DateTime!
  event: Event
  eventId: Int
  id: Int!
  level: Int!
  ongoing: Boolean!
  poapEventId: Int!
  redeemCodes(
    cursor: RedeemCodeWhereUniqueInput
    distinct: [RedeemCodeScalarFieldEnum!]
    orderBy: [RedeemCodeOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: RedeemCodeWhereInput
  ): [RedeemCode!]!
  repo: Repo!
  repoId: Int!
  status: GitPOAPStatus!
  threshold: Int!
  type: ClaimType!
  updatedAt: DateTime!
  year: Int!
}

type GitPOAPAvgAggregate {
  eventId: Float
  id: Float
  level: Float
  poapEventId: Float
  repoId: Float
  threshold: Float
  year: Float
}

input GitPOAPAvgOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  threshold: SortOrder
  year: SortOrder
}

type GitPOAPCount {
  claims: Int!
  redeemCodes: Int!
}

type GitPOAPCountAggregate {
  _all: Int!
  createdAt: Int!
  eventId: Int!
  id: Int!
  level: Int!
  ongoing: Int!
  poapEventId: Int!
  poapSecret: Int!
  repoId: Int!
  status: Int!
  threshold: Int!
  type: Int!
  updatedAt: Int!
  year: Int!
}

input GitPOAPCountOrderByAggregateInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  ongoing: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  status: SortOrder
  threshold: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

type GitPOAPGroupBy {
  _avg: GitPOAPAvgAggregate
  _count: GitPOAPCountAggregate
  _max: GitPOAPMaxAggregate
  _min: GitPOAPMinAggregate
  _sum: GitPOAPSumAggregate
  createdAt: DateTime!
  eventId: Int
  id: Int!
  level: Int!
  ongoing: Boolean!
  poapEventId: Int!
  poapSecret: String!
  repoId: Int!
  status: GitPOAPStatus!
  threshold: Int!
  type: ClaimType!
  updatedAt: DateTime!
  year: Int!
}

input GitPOAPListRelationFilter {
  every: GitPOAPWhereInput
  none: GitPOAPWhereInput
  some: GitPOAPWhereInput
}

type GitPOAPMaxAggregate {
  createdAt: DateTime
  eventId: Int
  id: Int
  level: Int
  ongoing: Boolean
  poapEventId: Int
  poapSecret: String
  repoId: Int
  status: GitPOAPStatus
  threshold: Int
  type: ClaimType
  updatedAt: DateTime
  year: Int
}

input GitPOAPMaxOrderByAggregateInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  ongoing: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  status: SortOrder
  threshold: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

type GitPOAPMinAggregate {
  createdAt: DateTime
  eventId: Int
  id: Int
  level: Int
  ongoing: Boolean
  poapEventId: Int
  poapSecret: String
  repoId: Int
  status: GitPOAPStatus
  threshold: Int
  type: ClaimType
  updatedAt: DateTime
  year: Int
}

input GitPOAPMinOrderByAggregateInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  ongoing: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  status: SortOrder
  threshold: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPOrderByRelationAggregateInput {
  _count: SortOrder
}

input GitPOAPOrderByWithAggregationInput {
  _avg: GitPOAPAvgOrderByAggregateInput
  _count: GitPOAPCountOrderByAggregateInput
  _max: GitPOAPMaxOrderByAggregateInput
  _min: GitPOAPMinOrderByAggregateInput
  _sum: GitPOAPSumOrderByAggregateInput
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  ongoing: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  status: SortOrder
  threshold: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPOrderByWithRelationInput {
  claims: ClaimOrderByRelationAggregateInput
  createdAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  ongoing: SortOrder
  poapEventId: SortOrder
  redeemCodes: RedeemCodeOrderByRelationAggregateInput
  repo: RepoOrderByWithRelationInput
  repoId: SortOrder
  status: SortOrder
  threshold: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  year: SortOrder
}

input GitPOAPRelationFilter {
  is: GitPOAPWhereInput
  isNot: GitPOAPWhereInput
}

enum GitPOAPScalarFieldEnum {
  createdAt
  eventId
  id
  level
  ongoing
  poapEventId
  poapSecret
  repoId
  status
  threshold
  type
  updatedAt
  year
}

input GitPOAPScalarWhereWithAggregatesInput {
  AND: [GitPOAPScalarWhereWithAggregatesInput!]
  NOT: [GitPOAPScalarWhereWithAggregatesInput!]
  OR: [GitPOAPScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  eventId: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  level: IntWithAggregatesFilter
  ongoing: BoolWithAggregatesFilter
  poapEventId: IntWithAggregatesFilter
  repoId: IntWithAggregatesFilter
  status: EnumGitPOAPStatusWithAggregatesFilter
  threshold: IntWithAggregatesFilter
  type: EnumClaimTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  year: IntWithAggregatesFilter
}

enum GitPOAPStatus {
  APPROVED
  REDEEM_REQUEST_PENDING
  UNAPPROVED
}

type GitPOAPSumAggregate {
  eventId: Int
  id: Int
  level: Int
  poapEventId: Int
  repoId: Int
  threshold: Int
  year: Int
}

input GitPOAPSumOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  level: SortOrder
  poapEventId: SortOrder
  repoId: SortOrder
  threshold: SortOrder
  year: SortOrder
}

input GitPOAPWhereInput {
  AND: [GitPOAPWhereInput!]
  NOT: [GitPOAPWhereInput!]
  OR: [GitPOAPWhereInput!]
  claims: ClaimListRelationFilter
  createdAt: DateTimeFilter
  event: EventRelationFilter
  eventId: IntNullableFilter
  id: IntFilter
  level: IntFilter
  ongoing: BoolFilter
  poapEventId: IntFilter
  redeemCodes: RedeemCodeListRelationFilter
  repo: RepoRelationFilter
  repoId: IntFilter
  status: EnumGitPOAPStatusFilter
  threshold: IntFilter
  type: EnumClaimTypeFilter
  updatedAt: DateTimeFilter
  year: IntFilter
}

input GitPOAPWhereUniqueInput {
  id: Int
  poapEventId: Int
}

type GitPOAPWithClaimsCount {
  claimsCount: Float!
  event: POAPEvent!
  gitPOAP: GitPOAP!
}

type GithubPullRequest {
  Claim(
    cursor: ClaimWhereUniqueInput
    distinct: [ClaimScalarFieldEnum!]
    orderBy: [ClaimOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): [Claim!]!
  _count: GithubPullRequestCount
  createdAt: DateTime!
  githubMergeCommitSha: String!
  githubMergedAt: DateTime!
  githubPullNumber: Int!
  githubTitle: String!
  id: Int!
  repo: Repo!
  repoId: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type GithubPullRequestAvgAggregate {
  githubPullNumber: Float
  id: Float
  repoId: Float
  userId: Float
}

input GithubPullRequestAvgOrderByAggregateInput {
  githubPullNumber: SortOrder
  id: SortOrder
  repoId: SortOrder
  userId: SortOrder
}

type GithubPullRequestCount {
  Claim: Int!
}

type GithubPullRequestCountAggregate {
  _all: Int!
  createdAt: Int!
  githubMergeCommitSha: Int!
  githubMergedAt: Int!
  githubPullNumber: Int!
  githubTitle: Int!
  id: Int!
  repoId: Int!
  updatedAt: Int!
  userId: Int!
}

input GithubPullRequestCountOrderByAggregateInput {
  createdAt: SortOrder
  githubMergeCommitSha: SortOrder
  githubMergedAt: SortOrder
  githubPullNumber: SortOrder
  githubTitle: SortOrder
  id: SortOrder
  repoId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type GithubPullRequestGroupBy {
  _avg: GithubPullRequestAvgAggregate
  _count: GithubPullRequestCountAggregate
  _max: GithubPullRequestMaxAggregate
  _min: GithubPullRequestMinAggregate
  _sum: GithubPullRequestSumAggregate
  createdAt: DateTime!
  githubMergeCommitSha: String!
  githubMergedAt: DateTime!
  githubPullNumber: Int!
  githubTitle: String!
  id: Int!
  repoId: Int!
  updatedAt: DateTime!
  userId: Int!
}

input GithubPullRequestListRelationFilter {
  every: GithubPullRequestWhereInput
  none: GithubPullRequestWhereInput
  some: GithubPullRequestWhereInput
}

type GithubPullRequestMaxAggregate {
  createdAt: DateTime
  githubMergeCommitSha: String
  githubMergedAt: DateTime
  githubPullNumber: Int
  githubTitle: String
  id: Int
  repoId: Int
  updatedAt: DateTime
  userId: Int
}

input GithubPullRequestMaxOrderByAggregateInput {
  createdAt: SortOrder
  githubMergeCommitSha: SortOrder
  githubMergedAt: SortOrder
  githubPullNumber: SortOrder
  githubTitle: SortOrder
  id: SortOrder
  repoId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type GithubPullRequestMinAggregate {
  createdAt: DateTime
  githubMergeCommitSha: String
  githubMergedAt: DateTime
  githubPullNumber: Int
  githubTitle: String
  id: Int
  repoId: Int
  updatedAt: DateTime
  userId: Int
}

input GithubPullRequestMinOrderByAggregateInput {
  createdAt: SortOrder
  githubMergeCommitSha: SortOrder
  githubMergedAt: SortOrder
  githubPullNumber: SortOrder
  githubTitle: SortOrder
  id: SortOrder
  repoId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input GithubPullRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input GithubPullRequestOrderByWithAggregationInput {
  _avg: GithubPullRequestAvgOrderByAggregateInput
  _count: GithubPullRequestCountOrderByAggregateInput
  _max: GithubPullRequestMaxOrderByAggregateInput
  _min: GithubPullRequestMinOrderByAggregateInput
  _sum: GithubPullRequestSumOrderByAggregateInput
  createdAt: SortOrder
  githubMergeCommitSha: SortOrder
  githubMergedAt: SortOrder
  githubPullNumber: SortOrder
  githubTitle: SortOrder
  id: SortOrder
  repoId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input GithubPullRequestOrderByWithRelationInput {
  Claim: ClaimOrderByRelationAggregateInput
  createdAt: SortOrder
  githubMergeCommitSha: SortOrder
  githubMergedAt: SortOrder
  githubPullNumber: SortOrder
  githubTitle: SortOrder
  id: SortOrder
  repo: RepoOrderByWithRelationInput
  repoId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input GithubPullRequestRelationFilter {
  is: GithubPullRequestWhereInput
  isNot: GithubPullRequestWhereInput
}

input GithubPullRequestRepoIdGithubPullNumberCompoundUniqueInput {
  githubPullNumber: Int!
  repoId: Int!
}

enum GithubPullRequestScalarFieldEnum {
  createdAt
  githubMergeCommitSha
  githubMergedAt
  githubPullNumber
  githubTitle
  id
  repoId
  updatedAt
  userId
}

input GithubPullRequestScalarWhereWithAggregatesInput {
  AND: [GithubPullRequestScalarWhereWithAggregatesInput!]
  NOT: [GithubPullRequestScalarWhereWithAggregatesInput!]
  OR: [GithubPullRequestScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  githubMergeCommitSha: StringWithAggregatesFilter
  githubMergedAt: DateTimeWithAggregatesFilter
  githubPullNumber: IntWithAggregatesFilter
  githubTitle: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  repoId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type GithubPullRequestSumAggregate {
  githubPullNumber: Int
  id: Int
  repoId: Int
  userId: Int
}

input GithubPullRequestSumOrderByAggregateInput {
  githubPullNumber: SortOrder
  id: SortOrder
  repoId: SortOrder
  userId: SortOrder
}

input GithubPullRequestWhereInput {
  AND: [GithubPullRequestWhereInput!]
  Claim: ClaimListRelationFilter
  NOT: [GithubPullRequestWhereInput!]
  OR: [GithubPullRequestWhereInput!]
  createdAt: DateTimeFilter
  githubMergeCommitSha: StringFilter
  githubMergedAt: DateTimeFilter
  githubPullNumber: IntFilter
  githubTitle: StringFilter
  id: IntFilter
  repo: RepoRelationFilter
  repoId: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input GithubPullRequestWhereUniqueInput {
  id: Int
  repoId_githubPullNumber: GithubPullRequestRepoIdGithubPullNumberCompoundUniqueInput
}

type Holder {
  address: String!
  bio: String
  gitPOAPCount: Float!
  githubHandle: String!
  personalSiteUrl: String
  profileId: Float!
  profileImageUrl: String
  twitterHandle: String
}

type Holders {
  holders: [Holder!]!
  totalHolders: Float!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumClaimStatusFilter {
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusFilter
  notIn: [ClaimStatus!]
}

input NestedEnumClaimStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimStatusFilter
  _min: NestedEnumClaimStatusFilter
  equals: ClaimStatus
  in: [ClaimStatus!]
  not: NestedEnumClaimStatusWithAggregatesFilter
  notIn: [ClaimStatus!]
}

input NestedEnumClaimTypeFilter {
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeFilter
  notIn: [ClaimType!]
}

input NestedEnumClaimTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumClaimTypeFilter
  _min: NestedEnumClaimTypeFilter
  equals: ClaimType
  in: [ClaimType!]
  not: NestedEnumClaimTypeWithAggregatesFilter
  notIn: [ClaimType!]
}

input NestedEnumGitPOAPStatusFilter {
  equals: GitPOAPStatus
  in: [GitPOAPStatus!]
  not: NestedEnumGitPOAPStatusFilter
  notIn: [GitPOAPStatus!]
}

input NestedEnumGitPOAPStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumGitPOAPStatusFilter
  _min: NestedEnumGitPOAPStatusFilter
  equals: GitPOAPStatus
  in: [GitPOAPStatus!]
  not: NestedEnumGitPOAPStatusWithAggregatesFilter
  notIn: [GitPOAPStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type NullableProfile {
  address: String!
  bannerImageUrl: String
  bio: String
  createdAt: DateTime
  ensName: String
  featuredPOAPs: [FeaturedPOAP!]!
  githubHandle: String
  id: Float
  name: String
  personalSiteUrl: String
  profileImageUrl: String
  twitterHandle: String
  updatedAt: DateTime
}

type Organization {
  _count: OrganizationCount
  createdAt: DateTime!
  description: String
  githubOrgId: Int!
  id: Int!
  name: String!
  repos(
    cursor: RepoWhereUniqueInput
    distinct: [RepoScalarFieldEnum!]
    orderBy: [RepoOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: RepoWhereInput
  ): [Repo!]!
  twitterHandle: String
  updatedAt: DateTime!
  url: String
}

type OrganizationAvgAggregate {
  githubOrgId: Float
  id: Float
}

input OrganizationAvgOrderByAggregateInput {
  githubOrgId: SortOrder
  id: SortOrder
}

type OrganizationCount {
  repos: Int!
}

type OrganizationCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  githubOrgId: Int!
  id: Int!
  name: Int!
  twitterHandle: Int!
  updatedAt: Int!
  url: Int!
}

input OrganizationCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type OrganizationData {
  _count: OrganizationCount
  contributorCount: Float!
  createdAt: DateTime!
  description: String
  gitPOAPCount: Float!
  githubOrgId: Int!
  id: Int!
  mintedGitPOAPCount: Float!
  name: String!
  projectCount: Float!
  repos(
    cursor: RepoWhereUniqueInput
    distinct: [RepoScalarFieldEnum!]
    orderBy: [RepoOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: RepoWhereInput
  ): [Repo!]!
  twitterHandle: String
  updatedAt: DateTime!
  url: String
}

type OrganizationGroupBy {
  _avg: OrganizationAvgAggregate
  _count: OrganizationCountAggregate
  _max: OrganizationMaxAggregate
  _min: OrganizationMinAggregate
  _sum: OrganizationSumAggregate
  createdAt: DateTime!
  description: String
  githubOrgId: Int!
  id: Int!
  name: String!
  twitterHandle: String
  updatedAt: DateTime!
  url: String
}

type OrganizationMaxAggregate {
  createdAt: DateTime
  description: String
  githubOrgId: Int
  id: Int
  name: String
  twitterHandle: String
  updatedAt: DateTime
  url: String
}

input OrganizationMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type OrganizationMinAggregate {
  createdAt: DateTime
  description: String
  githubOrgId: Int
  id: Int
  name: String
  twitterHandle: String
  updatedAt: DateTime
  url: String
}

input OrganizationMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input OrganizationOrderByWithAggregationInput {
  _avg: OrganizationAvgOrderByAggregateInput
  _count: OrganizationCountOrderByAggregateInput
  _max: OrganizationMaxOrderByAggregateInput
  _min: OrganizationMinOrderByAggregateInput
  _sum: OrganizationSumOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input OrganizationOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrder
  githubOrgId: SortOrder
  id: SortOrder
  name: SortOrder
  repos: RepoOrderByRelationAggregateInput
  twitterHandle: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input OrganizationRelationFilter {
  is: OrganizationWhereInput
  isNot: OrganizationWhereInput
}

enum OrganizationScalarFieldEnum {
  createdAt
  description
  githubOrgId
  id
  name
  twitterHandle
  updatedAt
  url
}

input OrganizationScalarWhereWithAggregatesInput {
  AND: [OrganizationScalarWhereWithAggregatesInput!]
  NOT: [OrganizationScalarWhereWithAggregatesInput!]
  OR: [OrganizationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  githubOrgId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  twitterHandle: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringNullableWithAggregatesFilter
}

type OrganizationSumAggregate {
  githubOrgId: Int
  id: Int
}

input OrganizationSumOrderByAggregateInput {
  githubOrgId: SortOrder
  id: SortOrder
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  githubOrgId: IntFilter
  id: IntFilter
  name: StringFilter
  repos: RepoListRelationFilter
  twitterHandle: StringNullableFilter
  updatedAt: DateTimeFilter
  url: StringNullableFilter
}

input OrganizationWhereUniqueInput {
  githubOrgId: Int
  id: Int
}

type POAPEvent {
  city: String!
  country: String!
  description: String!
  end_date: String!
  event_url: String!
  expiry_date: String!
  fancy_id: String!
  id: Float!
  image_url: String!
  name: String!
  start_date: String!
  supply: Float!
  year: Float!
}

type POAPToken {
  chain: String!
  created: String!
  event: POAPEvent!
  owner: String!
  tokenId: String!
}

type Profile {
  _count: ProfileCount
  address: String!
  bannerImageUrl: String
  bio: String
  createdAt: DateTime!
  featuredPOAPs(
    cursor: FeaturedPOAPWhereUniqueInput
    distinct: [FeaturedPOAPScalarFieldEnum!]
    orderBy: [FeaturedPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: FeaturedPOAPWhereInput
  ): [FeaturedPOAP!]!
  githubHandle: String
  id: Int!
  name: String
  personalSiteUrl: String
  profileImageUrl: String
  twitterHandle: String
  updatedAt: DateTime!
}

type ProfileAvgAggregate {
  id: Float
}

input ProfileAvgOrderByAggregateInput {
  id: SortOrder
}

type ProfileCount {
  featuredPOAPs: Int!
}

type ProfileCountAggregate {
  _all: Int!
  address: Int!
  bannerImageUrl: Int!
  bio: Int!
  createdAt: Int!
  githubHandle: Int!
  id: Int!
  name: Int!
  personalSiteUrl: Int!
  profileImageUrl: Int!
  twitterHandle: Int!
  updatedAt: Int!
}

input ProfileCountOrderByAggregateInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  githubHandle: SortOrder
  id: SortOrder
  name: SortOrder
  personalSiteUrl: SortOrder
  profileImageUrl: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
}

type ProfileGroupBy {
  _avg: ProfileAvgAggregate
  _count: ProfileCountAggregate
  _max: ProfileMaxAggregate
  _min: ProfileMinAggregate
  _sum: ProfileSumAggregate
  address: String!
  bannerImageUrl: String
  bio: String
  createdAt: DateTime!
  githubHandle: String
  id: Int!
  name: String
  personalSiteUrl: String
  profileImageUrl: String
  twitterHandle: String
  updatedAt: DateTime!
}

type ProfileMaxAggregate {
  address: String
  bannerImageUrl: String
  bio: String
  createdAt: DateTime
  githubHandle: String
  id: Int
  name: String
  personalSiteUrl: String
  profileImageUrl: String
  twitterHandle: String
  updatedAt: DateTime
}

input ProfileMaxOrderByAggregateInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  githubHandle: SortOrder
  id: SortOrder
  name: SortOrder
  personalSiteUrl: SortOrder
  profileImageUrl: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
}

type ProfileMinAggregate {
  address: String
  bannerImageUrl: String
  bio: String
  createdAt: DateTime
  githubHandle: String
  id: Int
  name: String
  personalSiteUrl: String
  profileImageUrl: String
  twitterHandle: String
  updatedAt: DateTime
}

input ProfileMinOrderByAggregateInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  githubHandle: SortOrder
  id: SortOrder
  name: SortOrder
  personalSiteUrl: SortOrder
  profileImageUrl: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByWithAggregationInput {
  _avg: ProfileAvgOrderByAggregateInput
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
  _sum: ProfileSumOrderByAggregateInput
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  githubHandle: SortOrder
  id: SortOrder
  name: SortOrder
  personalSiteUrl: SortOrder
  profileImageUrl: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByWithRelationInput {
  address: SortOrder
  bannerImageUrl: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  featuredPOAPs: FeaturedPOAPOrderByRelationAggregateInput
  githubHandle: SortOrder
  id: SortOrder
  name: SortOrder
  personalSiteUrl: SortOrder
  profileImageUrl: SortOrder
  twitterHandle: SortOrder
  updatedAt: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  address
  bannerImageUrl
  bio
  createdAt
  githubHandle
  id
  name
  personalSiteUrl
  profileImageUrl
  twitterHandle
  updatedAt
}

input ProfileScalarWhereWithAggregatesInput {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  address: StringWithAggregatesFilter
  bannerImageUrl: StringNullableWithAggregatesFilter
  bio: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  githubHandle: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  personalSiteUrl: StringNullableWithAggregatesFilter
  profileImageUrl: StringNullableWithAggregatesFilter
  twitterHandle: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ProfileSumAggregate {
  id: Int
}

input ProfileSumOrderByAggregateInput {
  id: SortOrder
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  address: StringFilter
  bannerImageUrl: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  featuredPOAPs: FeaturedPOAPListRelationFilter
  githubHandle: StringNullableFilter
  id: IntFilter
  name: StringNullableFilter
  personalSiteUrl: StringNullableFilter
  profileImageUrl: StringNullableFilter
  twitterHandle: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ProfileWhereUniqueInput {
  address: String
  id: Int
}

type ProfileWithClaimsCount {
  claimsCount: Float!
  profile: Profile!
}

type ProfileWithENS {
  ens: String!
  profile: Profile!
}

type Query {
  aggregateClaim(
    cursor: ClaimWhereUniqueInput
    orderBy: [ClaimOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): AggregateClaim!
  aggregateFeaturedPOAP(
    cursor: FeaturedPOAPWhereUniqueInput
    orderBy: [FeaturedPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: FeaturedPOAPWhereInput
  ): AggregateFeaturedPOAP!
  aggregateGitPOAP(
    cursor: GitPOAPWhereUniqueInput
    orderBy: [GitPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GitPOAPWhereInput
  ): AggregateGitPOAP!
  aggregateGithubPullRequest(
    cursor: GithubPullRequestWhereUniqueInput
    orderBy: [GithubPullRequestOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): AggregateGithubPullRequest!
  aggregateOrganization(
    cursor: OrganizationWhereUniqueInput
    orderBy: [OrganizationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: OrganizationWhereInput
  ): AggregateOrganization!
  aggregateProfile(
    cursor: ProfileWhereUniqueInput
    orderBy: [ProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ProfileWhereInput
  ): AggregateProfile!
  aggregateRepo(
    cursor: RepoWhereUniqueInput
    orderBy: [RepoOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: RepoWhereInput
  ): AggregateRepo!
  aggregateUser(
    cursor: UserWhereUniqueInput
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): AggregateUser!
  allOrganizations(
    page: Float = null
    perPage: Float = null
    sort: String = "alphabetical"
  ): [Organization!]
  allRepos(page: Float = null, perPage: Float = null, sort: String = "alphabetical"): [Repo!]
  claim(where: ClaimWhereUniqueInput!): Claim
  claims(
    cursor: ClaimWhereUniqueInput
    distinct: [ClaimScalarFieldEnum!]
    orderBy: [ClaimOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): [Claim!]!
  featuredPOAP(where: FeaturedPOAPWhereUniqueInput!): FeaturedPOAP
  featuredPOAPS(
    cursor: FeaturedPOAPWhereUniqueInput
    distinct: [FeaturedPOAPScalarFieldEnum!]
    orderBy: [FeaturedPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: FeaturedPOAPWhereInput
  ): [FeaturedPOAP!]!
  findFirstClaim(
    cursor: ClaimWhereUniqueInput
    distinct: [ClaimScalarFieldEnum!]
    orderBy: [ClaimOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): Claim
  findFirstFeaturedPOAP(
    cursor: FeaturedPOAPWhereUniqueInput
    distinct: [FeaturedPOAPScalarFieldEnum!]
    orderBy: [FeaturedPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: FeaturedPOAPWhereInput
  ): FeaturedPOAP
  findFirstGitPOAP(
    cursor: GitPOAPWhereUniqueInput
    distinct: [GitPOAPScalarFieldEnum!]
    orderBy: [GitPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GitPOAPWhereInput
  ): GitPOAP
  findFirstGithubPullRequest(
    cursor: GithubPullRequestWhereUniqueInput
    distinct: [GithubPullRequestScalarFieldEnum!]
    orderBy: [GithubPullRequestOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): GithubPullRequest
  findFirstOrganization(
    cursor: OrganizationWhereUniqueInput
    distinct: [OrganizationScalarFieldEnum!]
    orderBy: [OrganizationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: OrganizationWhereInput
  ): Organization
  findFirstProfile(
    cursor: ProfileWhereUniqueInput
    distinct: [ProfileScalarFieldEnum!]
    orderBy: [ProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ProfileWhereInput
  ): Profile
  findFirstRepo(
    cursor: RepoWhereUniqueInput
    distinct: [RepoScalarFieldEnum!]
    orderBy: [RepoOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: RepoWhereInput
  ): Repo
  findFirstUser(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): User
  gitPOAP(where: GitPOAPWhereUniqueInput!): GitPOAP
  gitPOAPEvent(id: Float!): FullGitPOAPEventData
  gitPOAPHolders(
    gitPOAPId: Float!
    page: Float = null
    perPage: Float = null
    sort: String = "claim-date"
  ): Holders
  gitPOAPS(
    cursor: GitPOAPWhereUniqueInput
    distinct: [GitPOAPScalarFieldEnum!]
    orderBy: [GitPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GitPOAPWhereInput
  ): [GitPOAP!]!
  githubPullRequest(where: GithubPullRequestWhereUniqueInput!): GithubPullRequest
  githubPullRequests(
    cursor: GithubPullRequestWhereUniqueInput
    distinct: [GithubPullRequestScalarFieldEnum!]
    orderBy: [GithubPullRequestOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): [GithubPullRequest!]!
  groupByClaim(
    by: [ClaimScalarFieldEnum!]!
    having: ClaimScalarWhereWithAggregatesInput
    orderBy: [ClaimOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): [ClaimGroupBy!]!
  groupByFeaturedPOAP(
    by: [FeaturedPOAPScalarFieldEnum!]!
    having: FeaturedPOAPScalarWhereWithAggregatesInput
    orderBy: [FeaturedPOAPOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: FeaturedPOAPWhereInput
  ): [FeaturedPOAPGroupBy!]!
  groupByGitPOAP(
    by: [GitPOAPScalarFieldEnum!]!
    having: GitPOAPScalarWhereWithAggregatesInput
    orderBy: [GitPOAPOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: GitPOAPWhereInput
  ): [GitPOAPGroupBy!]!
  groupByGithubPullRequest(
    by: [GithubPullRequestScalarFieldEnum!]!
    having: GithubPullRequestScalarWhereWithAggregatesInput
    orderBy: [GithubPullRequestOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): [GithubPullRequestGroupBy!]!
  groupByOrganization(
    by: [OrganizationScalarFieldEnum!]!
    having: OrganizationScalarWhereWithAggregatesInput
    orderBy: [OrganizationOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: OrganizationWhereInput
  ): [OrganizationGroupBy!]!
  groupByProfile(
    by: [ProfileScalarFieldEnum!]!
    having: ProfileScalarWhereWithAggregatesInput
    orderBy: [ProfileOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ProfileWhereInput
  ): [ProfileGroupBy!]!
  groupByRepo(
    by: [RepoScalarFieldEnum!]!
    having: RepoScalarWhereWithAggregatesInput
    orderBy: [RepoOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: RepoWhereInput
  ): [RepoGroupBy!]!
  groupByUser(
    by: [UserScalarFieldEnum!]!
    having: UserScalarWhereWithAggregatesInput
    orderBy: [UserOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [UserGroupBy!]!
  lastMonthClaims: Float!
  lastMonthContributors: Float!
  lastMonthGitPOAPs: Float!
  lastMonthRepos: Float!
  mostClaimedGitPOAPs(count: Float = 10): [GitPOAPWithClaimsCount!]
  mostHonoredContributors(count: Float = 10): [ProfileWithClaimsCount!]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationData(orgId: Float = null, orgName: String = null): OrganizationData
  organizationRepos(
    orgId: Float!
    page: Float = null
    perPage: Float = null
    sort: String = "alphabetical"
  ): [RepoData!]
  organizations(
    cursor: OrganizationWhereUniqueInput
    distinct: [OrganizationScalarFieldEnum!]
    orderBy: [OrganizationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: OrganizationWhereInput
  ): [Organization!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  profileData(address: String!): NullableProfile
  profileFeaturedPOAPs(address: String!): UserFeaturedPOAPs
  profiles(
    cursor: ProfileWhereUniqueInput
    distinct: [ProfileScalarFieldEnum!]
    orderBy: [ProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ProfileWhereInput
  ): [Profile!]!
  recentlyAddedProjects(count: Float = 10): [Repo!]!
  repo(where: RepoWhereUniqueInput!): Repo
  repoData(orgName: String = null, repoId: Float = null, repoName: String = null): RepoData
  repoGitPOAPs(
    page: Float = null
    perPage: Float = null
    repoId: Float!
    sort: String = "date"
  ): RepoGitPOAPs
  repoMostHonoredContributors(count: Float = 10, repoId: Float!): [ProfileWithClaimsCount!]!
  repoStarCount(repoId: Float!): Float!
  repos(
    cursor: RepoWhereUniqueInput
    distinct: [RepoScalarFieldEnum!]
    orderBy: [RepoOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: RepoWhereInput
  ): [Repo!]!
  search(text: String!): SearchResults!
  totalClaims: Float!
  totalContributors: Float!
  totalGitPOAPs: Float!
  totalRepos: Float!
  user(where: UserWhereUniqueInput!): User
  userClaims(githubId: Float!): [FullClaimData!]
  userPOAPs(
    address: String!
    page: Float = null
    perPage: Float = null
    sort: String = "date"
  ): UserPOAPs
  users(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type RedeemCode {
  code: String!
  gitPOAPId: Int!
  id: Int!
}

input RedeemCodeListRelationFilter {
  every: RedeemCodeWhereInput
  none: RedeemCodeWhereInput
  some: RedeemCodeWhereInput
}

input RedeemCodeOrderByRelationAggregateInput {
  _count: SortOrder
}

input RedeemCodeOrderByWithRelationInput {
  code: SortOrder
  gitPOAP: GitPOAPOrderByWithRelationInput
  gitPOAPId: SortOrder
  id: SortOrder
}

enum RedeemCodeScalarFieldEnum {
  code
  gitPOAPId
  id
}

input RedeemCodeWhereInput {
  AND: [RedeemCodeWhereInput!]
  NOT: [RedeemCodeWhereInput!]
  OR: [RedeemCodeWhereInput!]
  code: StringFilter
  gitPOAP: GitPOAPRelationFilter
  gitPOAPId: IntFilter
  id: IntFilter
}

input RedeemCodeWhereUniqueInput {
  id: Int
}

type Repo {
  GithubPullRequest(
    cursor: GithubPullRequestWhereUniqueInput
    distinct: [GithubPullRequestScalarFieldEnum!]
    orderBy: [GithubPullRequestOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): [GithubPullRequest!]!
  _count: RepoCount
  createdAt: DateTime!
  gitPOAPs(
    cursor: GitPOAPWhereUniqueInput
    distinct: [GitPOAPScalarFieldEnum!]
    orderBy: [GitPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GitPOAPWhereInput
  ): [GitPOAP!]!
  githubRepoId: Int!
  id: Int!
  lastPRUpdatedAt: DateTime!
  name: String!
  organization: Organization!
  organizationId: Int!
  updatedAt: DateTime!
}

type RepoAvgAggregate {
  githubRepoId: Float
  id: Float
  organizationId: Float
}

input RepoAvgOrderByAggregateInput {
  githubRepoId: SortOrder
  id: SortOrder
  organizationId: SortOrder
}

type RepoCount {
  GithubPullRequest: Int!
  gitPOAPs: Int!
}

type RepoCountAggregate {
  _all: Int!
  createdAt: Int!
  githubRepoId: Int!
  id: Int!
  lastPRUpdatedAt: Int!
  name: Int!
  organizationId: Int!
  updatedAt: Int!
}

input RepoCountOrderByAggregateInput {
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  lastPRUpdatedAt: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

type RepoData {
  GithubPullRequest(
    cursor: GithubPullRequestWhereUniqueInput
    distinct: [GithubPullRequestScalarFieldEnum!]
    orderBy: [GithubPullRequestOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): [GithubPullRequest!]!
  _count: RepoCount
  contributorCount: Float!
  createdAt: DateTime!
  gitPOAPCount: Float!
  gitPOAPs(
    cursor: GitPOAPWhereUniqueInput
    distinct: [GitPOAPScalarFieldEnum!]
    orderBy: [GitPOAPOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GitPOAPWhereInput
  ): [GitPOAP!]!
  githubRepoId: Int!
  id: Int!
  lastPRUpdatedAt: DateTime!
  mintedGitPOAPCount: Float!
  name: String!
  organization: Organization!
  organizationId: Int!
  updatedAt: DateTime!
}

type RepoGitPOAPs {
  gitPOAPs: [FullGitPOAPEventData!]!
  totalGitPOAPs: Float!
}

type RepoGroupBy {
  _avg: RepoAvgAggregate
  _count: RepoCountAggregate
  _max: RepoMaxAggregate
  _min: RepoMinAggregate
  _sum: RepoSumAggregate
  createdAt: DateTime!
  githubRepoId: Int!
  id: Int!
  lastPRUpdatedAt: DateTime!
  name: String!
  organizationId: Int!
  updatedAt: DateTime!
}

input RepoListRelationFilter {
  every: RepoWhereInput
  none: RepoWhereInput
  some: RepoWhereInput
}

type RepoMaxAggregate {
  createdAt: DateTime
  githubRepoId: Int
  id: Int
  lastPRUpdatedAt: DateTime
  name: String
  organizationId: Int
  updatedAt: DateTime
}

input RepoMaxOrderByAggregateInput {
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  lastPRUpdatedAt: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

type RepoMinAggregate {
  createdAt: DateTime
  githubRepoId: Int
  id: Int
  lastPRUpdatedAt: DateTime
  name: String
  organizationId: Int
  updatedAt: DateTime
}

input RepoMinOrderByAggregateInput {
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  lastPRUpdatedAt: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoOrderByRelationAggregateInput {
  _count: SortOrder
}

input RepoOrderByWithAggregationInput {
  _avg: RepoAvgOrderByAggregateInput
  _count: RepoCountOrderByAggregateInput
  _max: RepoMaxOrderByAggregateInput
  _min: RepoMinOrderByAggregateInput
  _sum: RepoSumOrderByAggregateInput
  createdAt: SortOrder
  githubRepoId: SortOrder
  id: SortOrder
  lastPRUpdatedAt: SortOrder
  name: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoOrderByWithRelationInput {
  GithubPullRequest: GithubPullRequestOrderByRelationAggregateInput
  createdAt: SortOrder
  gitPOAPs: GitPOAPOrderByRelationAggregateInput
  githubRepoId: SortOrder
  id: SortOrder
  lastPRUpdatedAt: SortOrder
  name: SortOrder
  organization: OrganizationOrderByWithRelationInput
  organizationId: SortOrder
  updatedAt: SortOrder
}

input RepoRelationFilter {
  is: RepoWhereInput
  isNot: RepoWhereInput
}

enum RepoScalarFieldEnum {
  createdAt
  githubRepoId
  id
  lastPRUpdatedAt
  name
  organizationId
  updatedAt
}

input RepoScalarWhereWithAggregatesInput {
  AND: [RepoScalarWhereWithAggregatesInput!]
  NOT: [RepoScalarWhereWithAggregatesInput!]
  OR: [RepoScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  githubRepoId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  lastPRUpdatedAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  organizationId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type RepoSumAggregate {
  githubRepoId: Int
  id: Int
  organizationId: Int
}

input RepoSumOrderByAggregateInput {
  githubRepoId: SortOrder
  id: SortOrder
  organizationId: SortOrder
}

input RepoWhereInput {
  AND: [RepoWhereInput!]
  GithubPullRequest: GithubPullRequestListRelationFilter
  NOT: [RepoWhereInput!]
  OR: [RepoWhereInput!]
  createdAt: DateTimeFilter
  gitPOAPs: GitPOAPListRelationFilter
  githubRepoId: IntFilter
  id: IntFilter
  lastPRUpdatedAt: DateTimeFilter
  name: StringFilter
  organization: OrganizationRelationFilter
  organizationId: IntFilter
  updatedAt: DateTimeFilter
}

input RepoWhereUniqueInput {
  githubRepoId: Int
  id: Int
}

type SearchResults {
  profileByENS: ProfileWithENS
  profilesByAddress: [Profile!]!
  profilesByName: [Profile!]!
  usersByGithubHandle: [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  GithubPullRequest(
    cursor: GithubPullRequestWhereUniqueInput
    distinct: [GithubPullRequestScalarFieldEnum!]
    orderBy: [GithubPullRequestOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: GithubPullRequestWhereInput
  ): [GithubPullRequest!]!
  _count: UserCount
  claims(
    cursor: ClaimWhereUniqueInput
    distinct: [ClaimScalarFieldEnum!]
    orderBy: [ClaimOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ClaimWhereInput
  ): [Claim!]!
  createdAt: DateTime!
  githubHandle: String!
  githubId: Int!
  id: Int!
  updatedAt: DateTime!
}

type UserAvgAggregate {
  githubId: Float
  id: Float
}

input UserAvgOrderByAggregateInput {
  githubId: SortOrder
  id: SortOrder
}

type UserCount {
  GithubPullRequest: Int!
  authTokens: Int!
  claims: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  githubHandle: Int!
  githubId: Int!
  id: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type UserFeaturedGitPOAPData {
  claim: Claim!
  poap: POAPToken!
}

type UserFeaturedPOAPs {
  gitPOAPs: [UserFeaturedGitPOAPData!]!
  poaps: [POAPToken!]!
}

type UserGitPOAPData {
  claim: Claim!
  event: POAPEvent!
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  createdAt: DateTime!
  githubHandle: String!
  githubId: Int!
  id: Int!
  updatedAt: DateTime!
}

type UserMaxAggregate {
  createdAt: DateTime
  githubHandle: String
  githubId: Int
  id: Int
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  githubHandle: String
  githubId: Int
  id: Int
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  GithubPullRequest: GithubPullRequestOrderByRelationAggregateInput
  claims: ClaimOrderByRelationAggregateInput
  createdAt: SortOrder
  githubHandle: SortOrder
  githubId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type UserPOAPs {
  gitPOAPs: [UserGitPOAPData!]!
  poaps: [POAPToken!]!
  totalGitPOAPs: Float!
  totalPOAPs: Float!
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  githubHandle
  githubId
  id
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  githubHandle: StringWithAggregatesFilter
  githubId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  githubId: Int
  id: Int
}

input UserSumOrderByAggregateInput {
  githubId: SortOrder
  id: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  GithubPullRequest: GithubPullRequestListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  claims: ClaimListRelationFilter
  createdAt: DateTimeFilter
  githubHandle: StringFilter
  githubId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  githubId: Int
  id: Int
}
